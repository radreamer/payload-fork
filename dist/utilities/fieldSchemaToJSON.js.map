{"version":3,"sources":["../../src/utilities/fieldSchemaToJSON.ts"],"sourcesContent":["import type { ClientConfig } from '../config/client.js'\n// @ts-strict-ignore\nimport type { ClientField } from '../fields/config/client.js'\n\nimport { fieldAffectsData, type FieldTypes } from '../fields/config/types.js'\n\nexport type FieldSchemaJSON = {\n  blocks?: FieldSchemaJSON // TODO: conditionally add based on `type`\n  fields?: FieldSchemaJSON // TODO: conditionally add based on `type`\n  hasMany?: boolean // TODO: conditionally add based on `type`\n  name: string\n  relationTo?: string // TODO: conditionally add based on `type`\n  slug?: string // TODO: conditionally add based on `type`\n  type: FieldTypes\n}[]\n\nexport const fieldSchemaToJSON = (fields: ClientField[], config: ClientConfig): FieldSchemaJSON => {\n  return fields.reduce((acc, field) => {\n    let result = acc\n\n    switch (field.type) {\n      case 'array':\n        acc.push({\n          name: field.name,\n          type: field.type,\n          fields: fieldSchemaToJSON(\n            [\n              ...field.fields,\n              {\n                name: 'id',\n                type: 'text',\n              },\n            ],\n            config,\n          ),\n        })\n\n        break\n\n      case 'blocks':\n        acc.push({\n          name: field.name,\n          type: field.type,\n          blocks: (field.blockReferences ?? field.blocks).reduce((acc, _block) => {\n            const block = typeof _block === 'string' ? config.blocksMap[_block] : _block\n            acc[block.slug] = {\n              fields: fieldSchemaToJSON(\n                [\n                  ...block.fields,\n                  {\n                    name: 'id',\n                    type: 'text',\n                  },\n                ],\n                config,\n              ),\n            }\n\n            return acc\n          }, {}),\n        })\n\n        break\n\n      case 'collapsible': // eslint-disable no-fallthrough\n      case 'row':\n        result = result.concat(fieldSchemaToJSON(field.fields, config))\n        break\n\n      case 'group':\n        if (fieldAffectsData(field)) {\n          acc.push({\n            name: field.name,\n            type: field.type,\n            fields: fieldSchemaToJSON(field.fields, config),\n          })\n        } else {\n          result = result.concat(fieldSchemaToJSON(field.fields, config))\n        }\n\n        break\n\n      case 'relationship': // eslint-disable no-fallthrough\n      case 'upload':\n        acc.push({\n          name: field.name,\n          type: field.type,\n          hasMany: 'hasMany' in field ? Boolean(field.hasMany) : false, // TODO: type this\n          relationTo: field.relationTo,\n        })\n\n        break\n\n      case 'tabs': {\n        let tabFields = []\n\n        field.tabs.forEach((tab) => {\n          if ('name' in tab) {\n            tabFields.push({\n              name: tab.name,\n              type: field.type,\n              fields: fieldSchemaToJSON(tab.fields, config),\n            })\n            return\n          }\n\n          tabFields = tabFields.concat(fieldSchemaToJSON(tab.fields, config))\n        })\n\n        result = result.concat(tabFields)\n\n        break\n      }\n\n      default:\n        if ('name' in field) {\n          acc.push({\n            name: field.name,\n            type: field.type,\n          })\n        }\n    }\n\n    return result\n  }, [])\n}\n"],"names":["fieldAffectsData","fieldSchemaToJSON","fields","config","reduce","acc","field","result","type","push","name","blocks","blockReferences","_block","block","blocksMap","slug","concat","hasMany","Boolean","relationTo","tabFields","tabs","forEach","tab"],"mappings":"AAIA,SAASA,gBAAgB,QAAyB,4BAA2B;AAY7E,OAAO,MAAMC,oBAAoB,CAACC,QAAuBC;IACvD,OAAOD,OAAOE,MAAM,CAAC,CAACC,KAAKC;QACzB,IAAIC,SAASF;QAEb,OAAQC,MAAME,IAAI;YAChB,KAAK;gBACHH,IAAII,IAAI,CAAC;oBACPC,MAAMJ,MAAMI,IAAI;oBAChBF,MAAMF,MAAME,IAAI;oBAChBN,QAAQD,kBACN;2BACKK,MAAMJ,MAAM;wBACf;4BACEQ,MAAM;4BACNF,MAAM;wBACR;qBACD,EACDL;gBAEJ;gBAEA;YAEF,KAAK;gBACHE,IAAII,IAAI,CAAC;oBACPC,MAAMJ,MAAMI,IAAI;oBAChBF,MAAMF,MAAME,IAAI;oBAChBG,QAAQ,AAACL,CAAAA,MAAMM,eAAe,IAAIN,MAAMK,MAAM,AAAD,EAAGP,MAAM,CAAC,CAACC,KAAKQ;wBAC3D,MAAMC,QAAQ,OAAOD,WAAW,WAAWV,OAAOY,SAAS,CAACF,OAAO,GAAGA;wBACtER,GAAG,CAACS,MAAME,IAAI,CAAC,GAAG;4BAChBd,QAAQD,kBACN;mCACKa,MAAMZ,MAAM;gCACf;oCACEQ,MAAM;oCACNF,MAAM;gCACR;6BACD,EACDL;wBAEJ;wBAEA,OAAOE;oBACT,GAAG,CAAC;gBACN;gBAEA;YAEF,KAAK;YACL,KAAK;gBACHE,SAASA,OAAOU,MAAM,CAAChB,kBAAkBK,MAAMJ,MAAM,EAAEC;gBACvD;YAEF,KAAK;gBACH,IAAIH,iBAAiBM,QAAQ;oBAC3BD,IAAII,IAAI,CAAC;wBACPC,MAAMJ,MAAMI,IAAI;wBAChBF,MAAMF,MAAME,IAAI;wBAChBN,QAAQD,kBAAkBK,MAAMJ,MAAM,EAAEC;oBAC1C;gBACF,OAAO;oBACLI,SAASA,OAAOU,MAAM,CAAChB,kBAAkBK,MAAMJ,MAAM,EAAEC;gBACzD;gBAEA;YAEF,KAAK;YACL,KAAK;gBACHE,IAAII,IAAI,CAAC;oBACPC,MAAMJ,MAAMI,IAAI;oBAChBF,MAAMF,MAAME,IAAI;oBAChBU,SAAS,aAAaZ,QAAQa,QAAQb,MAAMY,OAAO,IAAI;oBACvDE,YAAYd,MAAMc,UAAU;gBAC9B;gBAEA;YAEF,KAAK;gBAAQ;oBACX,IAAIC,YAAY,EAAE;oBAElBf,MAAMgB,IAAI,CAACC,OAAO,CAAC,CAACC;wBAClB,IAAI,UAAUA,KAAK;4BACjBH,UAAUZ,IAAI,CAAC;gCACbC,MAAMc,IAAId,IAAI;gCACdF,MAAMF,MAAME,IAAI;gCAChBN,QAAQD,kBAAkBuB,IAAItB,MAAM,EAAEC;4BACxC;4BACA;wBACF;wBAEAkB,YAAYA,UAAUJ,MAAM,CAAChB,kBAAkBuB,IAAItB,MAAM,EAAEC;oBAC7D;oBAEAI,SAASA,OAAOU,MAAM,CAACI;oBAEvB;gBACF;YAEA;gBACE,IAAI,UAAUf,OAAO;oBACnBD,IAAII,IAAI,CAAC;wBACPC,MAAMJ,MAAMI,IAAI;wBAChBF,MAAMF,MAAME,IAAI;oBAClB;gBACF;QACJ;QAEA,OAAOD;IACT,GAAG,EAAE;AACP,EAAC"}
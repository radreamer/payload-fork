{"version":3,"sources":["../../src/config/sanitize.ts"],"sourcesContent":["// @ts-strict-ignore\nimport type { AcceptedLanguages } from '@payloadcms/translations'\n\nimport { en } from '@payloadcms/translations/languages/en'\nimport { deepMergeSimple } from '@payloadcms/translations/utilities'\n\nimport type {\n  Config,\n  LocalizationConfigWithLabels,\n  LocalizationConfigWithNoLabels,\n  SanitizedConfig,\n  Timezone,\n} from './types.js'\n\nimport { defaultUserCollection } from '../auth/defaultUser.js'\nimport { authRootEndpoints } from '../auth/endpoints/index.js'\nimport { sanitizeCollection } from '../collections/config/sanitize.js'\nimport { migrationsCollection } from '../database/migrations/migrationsCollection.js'\nimport { DuplicateCollection, InvalidConfiguration } from '../errors/index.js'\nimport { defaultTimezones } from '../fields/baseFields/timezone/defaultTimezones.js'\nimport { sanitizeGlobal } from '../globals/config/sanitize.js'\nimport {\n  baseBlockFields,\n  type CollectionSlug,\n  formatLabels,\n  type GlobalSlug,\n  sanitizeFields,\n} from '../index.js'\nimport {\n  getLockedDocumentsCollection,\n  lockedDocumentsCollectionSlug,\n} from '../locked-documents/config.js'\nimport { getPreferencesCollection, preferencesCollectionSlug } from '../preferences/config.js'\nimport { getQueryPresetsConfig, queryPresetsCollectionSlug } from '../query-presets/config.js'\nimport { getDefaultJobsCollection, jobsCollectionSlug } from '../queues/config/index.js'\nimport { flattenBlock } from '../utilities/flattenAllFields.js'\nimport { getSchedulePublishTask } from '../versions/schedule/job.js'\nimport { addDefaultsToConfig } from './defaults.js'\nimport { setupOrderable } from './orderable/index.js'\n\nconst sanitizeAdminConfig = (configToSanitize: Config): Partial<SanitizedConfig> => {\n  const sanitizedConfig = { ...configToSanitize }\n\n  if (configToSanitize?.compatibility?.allowLocalizedWithinLocalized) {\n    process.env.NEXT_PUBLIC_PAYLOAD_COMPATIBILITY_allowLocalizedWithinLocalized = 'true'\n  }\n\n  // default logging level will be 'error' if not provided\n  sanitizedConfig.loggingLevels = {\n    Forbidden: 'info',\n    Locked: 'info',\n    MissingFile: 'info',\n    NotFound: 'info',\n    ValidationError: 'info',\n    ...(sanitizedConfig.loggingLevels || {}),\n  }\n\n  // add default user collection if none provided\n  if (!sanitizedConfig?.admin?.user) {\n    const firstCollectionWithAuth = sanitizedConfig.collections.find(({ auth }) => Boolean(auth))\n\n    if (firstCollectionWithAuth) {\n      sanitizedConfig.admin.user = firstCollectionWithAuth.slug\n    } else {\n      sanitizedConfig.admin.user = defaultUserCollection.slug\n      sanitizedConfig.collections.push(defaultUserCollection)\n    }\n  }\n\n  const userCollection = sanitizedConfig.collections.find(\n    ({ slug }) => slug === sanitizedConfig.admin.user,\n  )\n\n  if (!userCollection || !userCollection.auth) {\n    throw new InvalidConfiguration(\n      `${sanitizedConfig.admin.user} is not a valid admin user collection`,\n    )\n  }\n\n  if (sanitizedConfig?.admin?.timezones) {\n    if (typeof sanitizedConfig?.admin?.timezones?.supportedTimezones === 'function') {\n      sanitizedConfig.admin.timezones.supportedTimezones =\n        sanitizedConfig.admin.timezones.supportedTimezones({ defaultTimezones })\n    }\n\n    if (!sanitizedConfig?.admin?.timezones?.supportedTimezones) {\n      sanitizedConfig.admin.timezones.supportedTimezones = defaultTimezones\n    }\n  } else {\n    sanitizedConfig.admin.timezones = {\n      supportedTimezones: defaultTimezones,\n    }\n  }\n  // Timezones supported by the Intl API\n  const _internalSupportedTimezones = Intl.supportedValuesOf('timeZone')\n\n  // We're casting here because it's already been sanitised above but TS still thinks it could be a function\n  ;(sanitizedConfig.admin.timezones.supportedTimezones as Timezone[]).forEach((timezone) => {\n    if (!_internalSupportedTimezones.includes(timezone.value)) {\n      throw new InvalidConfiguration(\n        `Timezone ${timezone.value} is not supported by the current runtime via the Intl API.`,\n      )\n    }\n  })\n\n  return sanitizedConfig as unknown as Partial<SanitizedConfig>\n}\n\nexport const sanitizeConfig = async (incomingConfig: Config): Promise<SanitizedConfig> => {\n  const configWithDefaults = addDefaultsToConfig(incomingConfig)\n\n  const config: Partial<SanitizedConfig> = sanitizeAdminConfig(configWithDefaults)\n\n  // Add orderable fields\n  setupOrderable(config as SanitizedConfig)\n\n  if (!config.endpoints) {\n    config.endpoints = []\n  }\n\n  for (const endpoint of authRootEndpoints) {\n    config.endpoints.push(endpoint)\n  }\n\n  if (config.localization && config.localization.locales?.length > 0) {\n    // clone localization config so to not break everything\n    const firstLocale = config.localization.locales[0]\n    if (typeof firstLocale === 'string') {\n      config.localization.localeCodes = [\n        ...(config.localization as unknown as LocalizationConfigWithNoLabels).locales,\n      ]\n\n      // is string[], so convert to Locale[]\n      config.localization.locales = (\n        config.localization as unknown as LocalizationConfigWithNoLabels\n      ).locales.map((locale) => ({\n        code: locale,\n        label: locale,\n        rtl: false,\n        toString: () => locale,\n      }))\n    } else {\n      // is Locale[], so convert to string[] for localeCodes\n      config.localization.localeCodes = config.localization.locales.map((locale) => locale.code)\n\n      config.localization.locales = (\n        config.localization as LocalizationConfigWithLabels\n      ).locales.map((locale) => ({\n        ...locale,\n        toString: () => locale.code,\n      }))\n    }\n\n    // Default fallback to true if not provided\n    config.localization.fallback = config.localization?.fallback ?? true\n  }\n\n  const i18nConfig: SanitizedConfig['i18n'] = {\n    fallbackLanguage: 'en',\n    supportedLanguages: {\n      en,\n    },\n    translations: {},\n  }\n\n  if (incomingConfig?.i18n) {\n    i18nConfig.supportedLanguages =\n      incomingConfig.i18n?.supportedLanguages || i18nConfig.supportedLanguages\n\n    const supportedLangKeys = <AcceptedLanguages[]>Object.keys(i18nConfig.supportedLanguages)\n    const fallbackLang = incomingConfig.i18n?.fallbackLanguage || i18nConfig.fallbackLanguage\n\n    i18nConfig.fallbackLanguage = supportedLangKeys.includes(fallbackLang)\n      ? fallbackLang\n      : supportedLangKeys[0]\n    i18nConfig.translations =\n      (incomingConfig.i18n?.translations as SanitizedConfig['i18n']['translations']) ||\n      i18nConfig.translations\n  }\n\n  config.i18n = i18nConfig\n\n  const richTextSanitizationPromises: Array<(config: SanitizedConfig) => Promise<void>> = []\n\n  const schedulePublishCollections: CollectionSlug[] = []\n\n  const queryPresetsCollections: CollectionSlug[] = []\n\n  const schedulePublishGlobals: GlobalSlug[] = []\n\n  const collectionSlugs = new Set<CollectionSlug>()\n\n  const validRelationships = [\n    ...(config.collections.map((c) => c.slug) ?? []),\n    jobsCollectionSlug,\n    lockedDocumentsCollectionSlug,\n    preferencesCollectionSlug,\n  ]\n\n  /**\n   * Blocks sanitization needs to happen before collections, as collection/global join field sanitization needs config.blocks\n   * to be populated with the sanitized blocks\n   */\n  config.blocks = []\n\n  if (incomingConfig.blocks?.length) {\n    for (const block of incomingConfig.blocks) {\n      const sanitizedBlock = block\n\n      if (sanitizedBlock._sanitized === true) {\n        continue\n      }\n      sanitizedBlock._sanitized = true\n\n      sanitizedBlock.fields = sanitizedBlock.fields.concat(baseBlockFields)\n\n      sanitizedBlock.labels = !sanitizedBlock.labels\n        ? formatLabels(sanitizedBlock.slug)\n        : sanitizedBlock.labels\n\n      sanitizedBlock.fields = await sanitizeFields({\n        config: config as unknown as Config,\n        existingFieldNames: new Set(),\n        fields: sanitizedBlock.fields,\n        parentIsLocalized: false,\n        richTextSanitizationPromises,\n        validRelationships,\n      })\n\n      const flattenedSanitizedBlock = flattenBlock({ block })\n\n      config.blocks.push(flattenedSanitizedBlock)\n    }\n  }\n\n  for (let i = 0; i < config.collections.length; i++) {\n    if (collectionSlugs.has(config.collections[i].slug)) {\n      throw new DuplicateCollection('slug', config.collections[i].slug)\n    }\n\n    collectionSlugs.add(config.collections[i].slug)\n\n    const draftsConfig = config.collections[i]?.versions?.drafts\n\n    if (typeof draftsConfig === 'object' && draftsConfig.schedulePublish) {\n      schedulePublishCollections.push(config.collections[i].slug)\n    }\n\n    if (config.collections[i].enableQueryPresets) {\n      queryPresetsCollections.push(config.collections[i].slug)\n\n      if (!validRelationships.includes(queryPresetsCollectionSlug)) {\n        validRelationships.push(queryPresetsCollectionSlug)\n      }\n    }\n\n    config.collections[i] = await sanitizeCollection(\n      config as unknown as Config,\n      config.collections[i],\n      richTextSanitizationPromises,\n      validRelationships,\n    )\n  }\n\n  if (config.globals.length > 0) {\n    for (let i = 0; i < config.globals.length; i++) {\n      const draftsConfig = config.globals[i]?.versions?.drafts\n\n      if (typeof draftsConfig === 'object' && draftsConfig.schedulePublish) {\n        schedulePublishGlobals.push(config.globals[i].slug)\n      }\n\n      config.globals[i] = await sanitizeGlobal(\n        config as unknown as Config,\n        config.globals[i],\n        richTextSanitizationPromises,\n        validRelationships,\n      )\n    }\n  }\n\n  if (schedulePublishCollections.length > 0 || schedulePublishGlobals.length > 0) {\n    if (!Array.isArray(configWithDefaults.jobs?.tasks)) {\n      configWithDefaults.jobs.tasks = []\n    }\n\n    configWithDefaults.jobs.tasks.push(\n      getSchedulePublishTask({\n        adminUserSlug: config.admin.user,\n        collections: schedulePublishCollections,\n        globals: schedulePublishGlobals,\n      }),\n    )\n  }\n\n  // Need to add default jobs collection before locked documents collections\n  if (\n    (Array.isArray(configWithDefaults.jobs?.tasks) && configWithDefaults.jobs?.tasks?.length) ||\n    (Array.isArray(configWithDefaults.jobs?.workflows) &&\n      configWithDefaults.jobs?.workflows?.length)\n  ) {\n    let defaultJobsCollection = getDefaultJobsCollection(config as unknown as Config)\n\n    if (defaultJobsCollection) {\n      if (typeof configWithDefaults.jobs.jobsCollectionOverrides === 'function') {\n        defaultJobsCollection = configWithDefaults.jobs.jobsCollectionOverrides({\n          defaultJobsCollection,\n        })\n\n        const hooks = defaultJobsCollection?.hooks\n        // @todo - delete this check in 4.0\n        if (hooks && config?.jobs?.runHooks !== true) {\n          for (const hook of Object.keys(hooks)) {\n            const defaultAmount = hook === 'afterRead' || hook === 'beforeChange' ? 1 : 0\n            if (hooks[hook]?.length > defaultAmount) {\n              console.warn(\n                `The jobsCollectionOverrides function is returning a collection with an additional ${hook} hook defined. These hooks will not run unless the jobs.runHooks option is set to true. Setting this option to true will negatively impact performance.`,\n              )\n              break\n            }\n          }\n        }\n      }\n      const sanitizedJobsCollection = await sanitizeCollection(\n        config as unknown as Config,\n        defaultJobsCollection,\n        richTextSanitizationPromises,\n        validRelationships,\n      )\n\n      configWithDefaults.collections.push(sanitizedJobsCollection)\n    }\n  }\n\n  configWithDefaults.collections.push(\n    await sanitizeCollection(\n      config as unknown as Config,\n      getLockedDocumentsCollection(config as unknown as Config),\n      richTextSanitizationPromises,\n      validRelationships,\n    ),\n  )\n\n  configWithDefaults.collections.push(\n    await sanitizeCollection(\n      config as unknown as Config,\n      getPreferencesCollection(config as unknown as Config),\n      richTextSanitizationPromises,\n      validRelationships,\n    ),\n  )\n\n  configWithDefaults.collections.push(\n    await sanitizeCollection(\n      config as unknown as Config,\n      migrationsCollection,\n      richTextSanitizationPromises,\n      validRelationships,\n    ),\n  )\n\n  if (queryPresetsCollections.length > 0) {\n    configWithDefaults.collections.push(\n      await sanitizeCollection(\n        config as unknown as Config,\n        getQueryPresetsConfig(config as unknown as Config),\n        richTextSanitizationPromises,\n        validRelationships,\n      ),\n    )\n  }\n\n  if (config.serverURL !== '') {\n    config.csrf.push(config.serverURL)\n  }\n\n  // Get deduped list of upload adapters\n  if (!config.upload) {\n    config.upload = { adapters: [] }\n  }\n\n  config.upload.adapters = Array.from(\n    new Set(config.collections.map((c) => c.upload?.adapter).filter(Boolean)),\n  )\n\n  // Pass through the email config as is so adapters don't break\n  if (incomingConfig.email) {\n    config.email = incomingConfig.email\n  }\n\n  /*\n    Execute richText sanitization\n   */\n  if (typeof incomingConfig.editor === 'function') {\n    config.editor = await incomingConfig.editor({\n      config: config as SanitizedConfig,\n      isRoot: true,\n      parentIsLocalized: false,\n    })\n    if (config.editor.i18n && Object.keys(config.editor.i18n).length >= 0) {\n      config.i18n.translations = deepMergeSimple(config.i18n.translations, config.editor.i18n)\n    }\n  }\n\n  const promises: Promise<void>[] = []\n\n  for (const sanitizeFunction of richTextSanitizationPromises) {\n    promises.push(sanitizeFunction(config as SanitizedConfig))\n  }\n\n  await Promise.all(promises)\n\n  return config as SanitizedConfig\n}\n"],"names":["en","deepMergeSimple","defaultUserCollection","authRootEndpoints","sanitizeCollection","migrationsCollection","DuplicateCollection","InvalidConfiguration","defaultTimezones","sanitizeGlobal","baseBlockFields","formatLabels","sanitizeFields","getLockedDocumentsCollection","lockedDocumentsCollectionSlug","getPreferencesCollection","preferencesCollectionSlug","getQueryPresetsConfig","queryPresetsCollectionSlug","getDefaultJobsCollection","jobsCollectionSlug","flattenBlock","getSchedulePublishTask","addDefaultsToConfig","setupOrderable","sanitizeAdminConfig","configToSanitize","sanitizedConfig","compatibility","allowLocalizedWithinLocalized","process","env","NEXT_PUBLIC_PAYLOAD_COMPATIBILITY_allowLocalizedWithinLocalized","loggingLevels","Forbidden","Locked","MissingFile","NotFound","ValidationError","admin","user","firstCollectionWithAuth","collections","find","auth","Boolean","slug","push","userCollection","timezones","supportedTimezones","_internalSupportedTimezones","Intl","supportedValuesOf","forEach","timezone","includes","value","sanitizeConfig","incomingConfig","configWithDefaults","config","endpoints","endpoint","localization","locales","length","firstLocale","localeCodes","map","locale","code","label","rtl","toString","fallback","i18nConfig","fallbackLanguage","supportedLanguages","translations","i18n","supportedLangKeys","Object","keys","fallbackLang","richTextSanitizationPromises","schedulePublishCollections","queryPresetsCollections","schedulePublishGlobals","collectionSlugs","Set","validRelationships","c","blocks","block","sanitizedBlock","_sanitized","fields","concat","labels","existingFieldNames","parentIsLocalized","flattenedSanitizedBlock","i","has","add","draftsConfig","versions","drafts","schedulePublish","enableQueryPresets","globals","Array","isArray","jobs","tasks","adminUserSlug","workflows","defaultJobsCollection","jobsCollectionOverrides","hooks","runHooks","hook","defaultAmount","console","warn","sanitizedJobsCollection","serverURL","csrf","upload","adapters","from","adapter","filter","email","editor","isRoot","promises","sanitizeFunction","Promise","all"],"mappings":"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"}
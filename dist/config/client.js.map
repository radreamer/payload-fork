{"version":3,"sources":["../../src/config/client.ts"],"sourcesContent":["// @ts-strict-ignore\nimport type { I18nClient } from '@payloadcms/translations'\nimport type { DeepPartial } from 'ts-essentials'\n\nimport type { ImportMap } from '../bin/generateImportMap/index.js'\nimport type { ClientBlock } from '../fields/config/types.js'\nimport type { BlockSlug } from '../index.js'\nimport type {\n  LivePreviewConfig,\n  SanitizedConfig,\n  ServerOnlyLivePreviewProperties,\n} from './types.js'\n\nimport {\n  type ClientCollectionConfig,\n  createClientCollectionConfigs,\n} from '../collections/config/client.js'\nimport { createClientBlocks } from '../fields/config/client.js'\nimport { type ClientGlobalConfig, createClientGlobalConfigs } from '../globals/config/client.js'\n\nexport type ServerOnlyRootProperties = keyof Pick<\n  SanitizedConfig,\n  | 'bin'\n  | 'cors'\n  | 'csrf'\n  | 'custom'\n  | 'db'\n  | 'editor'\n  | 'email'\n  | 'endpoints'\n  | 'graphQL'\n  | 'hooks'\n  | 'i18n'\n  | 'jobs'\n  | 'logger'\n  | 'onInit'\n  | 'plugins'\n  | 'queryPresets'\n  | 'secret'\n  | 'sharp'\n  | 'typescript'\n>\n\nexport type ServerOnlyRootAdminProperties = keyof Pick<SanitizedConfig['admin'], 'components'>\n\nexport type UnsanitizedClientConfig = {\n  admin: {\n    livePreview?: Omit<LivePreviewConfig, ServerOnlyLivePreviewProperties>\n  } & Omit<SanitizedConfig['admin'], 'components' | 'dependencies' | 'livePreview'>\n  blocks: ClientBlock[]\n  collections: ClientCollectionConfig[]\n  custom?: Record<string, any>\n  globals: ClientGlobalConfig[]\n} & Omit<SanitizedConfig, 'admin' | 'collections' | 'globals' | 'i18n' | ServerOnlyRootProperties>\n\nexport type ClientConfig = {\n  admin: {\n    livePreview?: Omit<LivePreviewConfig, ServerOnlyLivePreviewProperties>\n  } & Omit<SanitizedConfig['admin'], 'components' | 'dependencies' | 'livePreview'>\n  blocks: ClientBlock[]\n  blocksMap: Record<BlockSlug, ClientBlock>\n  collections: ClientCollectionConfig[]\n  custom?: Record<string, any>\n  globals: ClientGlobalConfig[]\n} & Omit<SanitizedConfig, 'admin' | 'collections' | 'globals' | 'i18n' | ServerOnlyRootProperties>\n\nexport const serverOnlyAdminConfigProperties: readonly Partial<ServerOnlyRootAdminProperties>[] = []\n\nexport const serverOnlyConfigProperties: readonly Partial<ServerOnlyRootProperties>[] = [\n  'endpoints',\n  'db',\n  'editor',\n  'plugins',\n  'sharp',\n  'onInit',\n  'secret',\n  'hooks',\n  'bin',\n  'i18n',\n  'typescript',\n  'cors',\n  'csrf',\n  'email',\n  'custom',\n  'graphQL',\n  'jobs',\n  'logger',\n  'queryPresets',\n  // `admin`, `onInit`, `localization`, `collections`, and `globals` are all handled separately\n]\n\nexport const createClientConfig = ({\n  config,\n  i18n,\n  importMap,\n}: {\n  config: SanitizedConfig\n  i18n: I18nClient\n  importMap: ImportMap\n}): ClientConfig => {\n  const clientConfig = {} as DeepPartial<ClientConfig>\n\n  for (const key in config) {\n    if (serverOnlyConfigProperties.includes(key as any)) {\n      continue\n    }\n    switch (key) {\n      case 'admin':\n        clientConfig.admin = {\n          autoLogin: config.admin.autoLogin,\n          avatar: config.admin.avatar,\n          custom: config.admin.custom,\n          dateFormat: config.admin.dateFormat,\n          importMap: config.admin.importMap,\n          meta: config.admin.meta,\n          routes: config.admin.routes,\n          theme: config.admin.theme,\n          timezones: config.admin.timezones,\n          user: config.admin.user,\n        }\n        if (config.admin.livePreview) {\n          clientConfig.admin.livePreview = {}\n\n          if (config.admin.livePreview.breakpoints) {\n            clientConfig.admin.livePreview.breakpoints = config.admin.livePreview.breakpoints\n          }\n        }\n        break\n      case 'blocks': {\n        ;(clientConfig.blocks as ClientBlock[]) = createClientBlocks({\n          blocks: config.blocks,\n          defaultIDType: config.db.defaultIDType,\n          i18n,\n          importMap,\n        }).filter((block) => typeof block !== 'string') as ClientBlock[]\n\n        break\n      }\n      case 'collections':\n        ;(clientConfig.collections as ClientCollectionConfig[]) = createClientCollectionConfigs({\n          collections: config.collections,\n          defaultIDType: config.db.defaultIDType,\n          i18n,\n          importMap,\n        })\n        break\n      case 'globals':\n        ;(clientConfig.globals as ClientGlobalConfig[]) = createClientGlobalConfigs({\n          defaultIDType: config.db.defaultIDType,\n          globals: config.globals,\n          i18n,\n          importMap,\n        })\n        break\n\n      case 'localization':\n        if (typeof config.localization === 'object' && config.localization) {\n          clientConfig.localization = {}\n          if (config.localization.defaultLocale) {\n            clientConfig.localization.defaultLocale = config.localization.defaultLocale\n          }\n          if (config.localization.defaultLocalePublishOption) {\n            clientConfig.localization.defaultLocalePublishOption =\n              config.localization.defaultLocalePublishOption\n          }\n          if (config.localization.fallback) {\n            clientConfig.localization.fallback = config.localization.fallback\n          }\n          if (config.localization.localeCodes) {\n            clientConfig.localization.localeCodes = config.localization.localeCodes\n          }\n          if (config.localization.locales) {\n            clientConfig.localization.locales = []\n            for (const locale of config.localization.locales) {\n              if (locale) {\n                const clientLocale: Partial<(typeof config.localization.locales)[0]> = {}\n                if (locale.code) {\n                  clientLocale.code = locale.code\n                }\n                if (locale.fallbackLocale) {\n                  clientLocale.fallbackLocale = locale.fallbackLocale\n                }\n                if (locale.label) {\n                  clientLocale.label = locale.label\n                }\n                if (locale.rtl) {\n                  clientLocale.rtl = locale.rtl\n                }\n                clientConfig.localization.locales.push(clientLocale)\n              }\n            }\n          }\n        }\n        break\n      default:\n        clientConfig[key] = config[key]\n    }\n  }\n  return clientConfig as ClientConfig\n}\n"],"names":["createClientCollectionConfigs","createClientBlocks","createClientGlobalConfigs","serverOnlyAdminConfigProperties","serverOnlyConfigProperties","createClientConfig","config","i18n","importMap","clientConfig","key","includes","admin","autoLogin","avatar","custom","dateFormat","meta","routes","theme","timezones","user","livePreview","breakpoints","blocks","defaultIDType","db","filter","block","collections","globals","localization","defaultLocale","defaultLocalePublishOption","fallback","localeCodes","locales","locale","clientLocale","code","fallbackLocale","label","rtl","push"],"mappings":"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"}
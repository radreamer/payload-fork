{"version":3,"sources":["../../../src/globals/operations/countGlobalVersions.ts"],"sourcesContent":["// @ts-strict-ignore\nimport type { AccessResult } from '../../config/types.js'\nimport type { PayloadRequest, Where } from '../../types/index.js'\n\nimport executeAccess from '../../auth/executeAccess.js'\nimport { combineQueries } from '../../database/combineQueries.js'\nimport { validateQueryPaths } from '../../database/queryValidation/validateQueryPaths.js'\nimport {\n  buildVersionGlobalFields,\n  type GlobalSlug,\n  type SanitizedGlobalConfig,\n} from '../../index.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\n\nexport type Arguments = {\n  disableErrors?: boolean\n  global: SanitizedGlobalConfig\n  overrideAccess?: boolean\n  req?: PayloadRequest\n  where?: Where\n}\n\nexport const countGlobalVersionsOperation = async <TSlug extends GlobalSlug>(\n  args: Arguments,\n): Promise<{ totalDocs: number }> => {\n  try {\n    const {\n      disableErrors,\n      global,\n      overrideAccess,\n      req: { payload },\n      req,\n      where,\n    } = args\n\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    let accessResult: AccessResult\n\n    if (!overrideAccess) {\n      accessResult = await executeAccess({ disableErrors, req }, global.access.readVersions)\n\n      // If errors are disabled, and access returns false, return empty results\n      if (accessResult === false) {\n        return {\n          totalDocs: 0,\n        }\n      }\n    }\n\n    const fullWhere = combineQueries(where, accessResult)\n\n    const versionFields = buildVersionGlobalFields(payload.config, global, true)\n\n    await validateQueryPaths({\n      globalConfig: global,\n      overrideAccess,\n      req,\n      versionFields,\n      where,\n    })\n\n    const result = await payload.db.countGlobalVersions({\n      global: global.slug,\n      req,\n      where: fullWhere,\n    })\n\n    // /////////////////////////////////////\n    // Return results\n    // /////////////////////////////////////\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(args.req)\n    throw error\n  }\n}\n"],"names":["executeAccess","combineQueries","validateQueryPaths","buildVersionGlobalFields","killTransaction","countGlobalVersionsOperation","args","disableErrors","global","overrideAccess","req","payload","where","accessResult","access","readVersions","totalDocs","fullWhere","versionFields","config","globalConfig","result","db","countGlobalVersions","slug","error"],"mappings":"AAAA,oBAAoB;AAIpB,OAAOA,mBAAmB,8BAA6B;AACvD,SAASC,cAAc,QAAQ,mCAAkC;AACjE,SAASC,kBAAkB,QAAQ,uDAAsD;AACzF,SACEC,wBAAwB,QAGnB,iBAAgB;AACvB,SAASC,eAAe,QAAQ,qCAAoC;AAUpE,OAAO,MAAMC,+BAA+B,OAC1CC;IAEA,IAAI;QACF,MAAM,EACJC,aAAa,EACbC,MAAM,EACNC,cAAc,EACdC,KAAK,EAAEC,OAAO,EAAE,EAChBD,GAAG,EACHE,KAAK,EACN,GAAGN;QAEJ,wCAAwC;QACxC,SAAS;QACT,wCAAwC;QAExC,IAAIO;QAEJ,IAAI,CAACJ,gBAAgB;YACnBI,eAAe,MAAMb,cAAc;gBAAEO;gBAAeG;YAAI,GAAGF,OAAOM,MAAM,CAACC,YAAY;YAErF,yEAAyE;YACzE,IAAIF,iBAAiB,OAAO;gBAC1B,OAAO;oBACLG,WAAW;gBACb;YACF;QACF;QAEA,MAAMC,YAAYhB,eAAeW,OAAOC;QAExC,MAAMK,gBAAgBf,yBAAyBQ,QAAQQ,MAAM,EAAEX,QAAQ;QAEvE,MAAMN,mBAAmB;YACvBkB,cAAcZ;YACdC;YACAC;YACAQ;YACAN;QACF;QAEA,MAAMS,SAAS,MAAMV,QAAQW,EAAE,CAACC,mBAAmB,CAAC;YAClDf,QAAQA,OAAOgB,IAAI;YACnBd;YACAE,OAAOK;QACT;QAEA,wCAAwC;QACxC,iBAAiB;QACjB,wCAAwC;QAExC,OAAOI;IACT,EAAE,OAAOI,OAAgB;QACvB,MAAMrB,gBAAgBE,KAAKI,GAAG;QAC9B,MAAMe;IACR;AACF,EAAC"}
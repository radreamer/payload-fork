{"version":3,"sources":["../../../src/globals/operations/restoreVersion.ts"],"sourcesContent":["// @ts-strict-ignore\nimport type { PayloadRequest, PopulateType } from '../../types/index.js'\nimport type { TypeWithVersion } from '../../versions/types.js'\nimport type { SanitizedGlobalConfig } from '../config/types.js'\n\nimport executeAccess from '../../auth/executeAccess.js'\nimport { NotFound } from '../../errors/index.js'\nimport { afterChange } from '../../fields/hooks/afterChange/index.js'\nimport { afterRead } from '../../fields/hooks/afterRead/index.js'\nimport { commitTransaction } from '../../utilities/commitTransaction.js'\nimport { initTransaction } from '../../utilities/initTransaction.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\n\nexport type Arguments = {\n  depth?: number\n  draft?: boolean\n  globalConfig: SanitizedGlobalConfig\n  id: number | string\n  overrideAccess?: boolean\n  populate?: PopulateType\n  req?: PayloadRequest\n  showHiddenFields?: boolean\n}\n\nexport const restoreVersionOperation = async <T extends TypeWithVersion<T> = any>(\n  args: Arguments,\n): Promise<T> => {\n  const {\n    id,\n    depth,\n    draft,\n    globalConfig,\n    overrideAccess,\n    populate,\n    req: { fallbackLocale, locale, payload },\n    req,\n    showHiddenFields,\n  } = args\n\n  try {\n    const shouldCommit = await initTransaction(req)\n\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    if (!overrideAccess) {\n      await executeAccess({ req }, globalConfig.access.update)\n    }\n\n    // /////////////////////////////////////\n    // Retrieve original raw version\n    // /////////////////////////////////////\n\n    const { docs: versionDocs } = await payload.db.findGlobalVersions<any>({\n      global: globalConfig.slug,\n      limit: 1,\n      req,\n      where: { id: { equals: id } },\n    })\n\n    if (!versionDocs || versionDocs.length === 0) {\n      throw new NotFound(req.t)\n    }\n\n    const rawVersion = versionDocs[0]\n\n    // Patch globalType onto version doc\n    rawVersion.version.globalType = globalConfig.slug\n\n    // Overwrite draft status if draft is true\n\n    if (draft) {\n      rawVersion.version._status = 'draft'\n    }\n    // /////////////////////////////////////\n    // fetch previousDoc\n    // /////////////////////////////////////\n\n    const previousDoc = await payload.findGlobal({\n      slug: globalConfig.slug,\n      depth,\n      req,\n    })\n\n    // /////////////////////////////////////\n    // Update global\n    // /////////////////////////////////////\n\n    const global = await payload.db.findGlobal({\n      slug: globalConfig.slug,\n      req,\n    })\n\n    let result = rawVersion.version\n\n    if (global) {\n      result = await payload.db.updateGlobal({\n        slug: globalConfig.slug,\n        data: result,\n        req,\n      })\n\n      const now = new Date().toISOString()\n\n      result = await payload.db.createGlobalVersion({\n        autosave: false,\n        createdAt: result.createdAt ? new Date(result.createdAt).toISOString() : now,\n        globalSlug: globalConfig.slug,\n        parent: id,\n        req,\n        updatedAt: draft ? now : new Date(result.updatedAt).toISOString(),\n        versionData: result,\n      })\n    } else {\n      result = await payload.db.createGlobal({\n        slug: globalConfig.slug,\n        data: result,\n        req,\n      })\n    }\n\n    // /////////////////////////////////////\n    // afterRead - Fields\n    // /////////////////////////////////////\n\n    result = await afterRead({\n      collection: null,\n      context: req.context,\n      depth,\n      doc: result,\n      draft: undefined,\n      fallbackLocale,\n      global: globalConfig,\n      locale,\n      overrideAccess,\n      populate,\n      req,\n      showHiddenFields,\n    })\n\n    // /////////////////////////////////////\n    // afterRead - Global\n    // /////////////////////////////////////\n\n    if (globalConfig.hooks?.afterRead?.length) {\n      for (const hook of globalConfig.hooks.afterRead) {\n        result =\n          (await hook({\n            context: req.context,\n            doc: result,\n            global: globalConfig,\n            req,\n          })) || result\n      }\n    }\n\n    // /////////////////////////////////////\n    // afterChange - Fields\n    // /////////////////////////////////////\n\n    result = await afterChange({\n      collection: null,\n      context: req.context,\n      data: result,\n      doc: result,\n      global: globalConfig,\n      operation: 'update',\n      previousDoc,\n      req,\n    })\n\n    // /////////////////////////////////////\n    // afterChange - Global\n    // /////////////////////////////////////\n\n    if (globalConfig.hooks?.afterChange?.length) {\n      for (const hook of globalConfig.hooks.afterChange) {\n        result =\n          (await hook({\n            context: req.context,\n            doc: result,\n            global: globalConfig,\n            previousDoc,\n            req,\n          })) || result\n      }\n    }\n\n    if (shouldCommit) {\n      await commitTransaction(req)\n    }\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(req)\n    throw error\n  }\n}\n"],"names":["executeAccess","NotFound","afterChange","afterRead","commitTransaction","initTransaction","killTransaction","restoreVersionOperation","args","id","depth","draft","globalConfig","overrideAccess","populate","req","fallbackLocale","locale","payload","showHiddenFields","shouldCommit","access","update","docs","versionDocs","db","findGlobalVersions","global","slug","limit","where","equals","length","t","rawVersion","version","globalType","_status","previousDoc","findGlobal","result","updateGlobal","data","now","Date","toISOString","createGlobalVersion","autosave","createdAt","globalSlug","parent","updatedAt","versionData","createGlobal","collection","context","doc","undefined","hooks","hook","operation","error"],"mappings":"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"}
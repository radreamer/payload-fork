{"version":3,"sources":["../../../src/globals/operations/findVersions.ts"],"sourcesContent":["// @ts-strict-ignore\nimport type { PaginatedDocs } from '../../database/types.js'\nimport type { PayloadRequest, PopulateType, SelectType, Sort, Where } from '../../types/index.js'\nimport type { TypeWithVersion } from '../../versions/types.js'\nimport type { SanitizedGlobalConfig } from '../config/types.js'\n\nimport executeAccess from '../../auth/executeAccess.js'\nimport { combineQueries } from '../../database/combineQueries.js'\nimport { validateQueryPaths } from '../../database/queryValidation/validateQueryPaths.js'\nimport { afterRead } from '../../fields/hooks/afterRead/index.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport sanitizeInternalFields from '../../utilities/sanitizeInternalFields.js'\nimport { sanitizeSelect } from '../../utilities/sanitizeSelect.js'\nimport { buildVersionGlobalFields } from '../../versions/buildGlobalFields.js'\nimport { getQueryDraftsSelect } from '../../versions/drafts/getQueryDraftsSelect.js'\n\nexport type Arguments = {\n  depth?: number\n  globalConfig: SanitizedGlobalConfig\n  limit?: number\n  overrideAccess?: boolean\n  page?: number\n  pagination?: boolean\n  populate?: PopulateType\n  req?: PayloadRequest\n  select?: SelectType\n  showHiddenFields?: boolean\n  sort?: Sort\n  where?: Where\n}\n\nexport const findVersionsOperation = async <T extends TypeWithVersion<T>>(\n  args: Arguments,\n): Promise<PaginatedDocs<T>> => {\n  const {\n    depth,\n    globalConfig,\n    limit,\n    overrideAccess,\n    page,\n    pagination = true,\n    populate,\n    req: { fallbackLocale, locale, payload },\n    req,\n    select: incomingSelect,\n    showHiddenFields,\n    sort,\n    where,\n  } = args\n\n  const versionFields = buildVersionGlobalFields(payload.config, globalConfig, true)\n\n  try {\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    const accessResults = !overrideAccess\n      ? await executeAccess({ req }, globalConfig.access.readVersions)\n      : true\n\n    await validateQueryPaths({\n      globalConfig,\n      overrideAccess,\n      req,\n      versionFields,\n      where,\n    })\n\n    const fullWhere = combineQueries(where, accessResults)\n\n    const select = sanitizeSelect({\n      fields: buildVersionGlobalFields(payload.config, globalConfig, true),\n      forceSelect: getQueryDraftsSelect({ select: globalConfig.forceSelect }),\n      select: incomingSelect,\n      versions: true,\n    })\n\n    // /////////////////////////////////////\n    // Find\n    // /////////////////////////////////////\n\n    const paginatedDocs = await payload.db.findGlobalVersions<T>({\n      global: globalConfig.slug,\n      limit: limit ?? 10,\n      locale,\n      page: page || 1,\n      pagination,\n      req,\n      select,\n      sort,\n      where: fullWhere,\n    })\n\n    // /////////////////////////////////////\n    // afterRead - Fields\n    // /////////////////////////////////////\n\n    let result = {\n      ...paginatedDocs,\n      docs: await Promise.all(\n        paginatedDocs.docs.map(async (data) => {\n          if (!data.version) {\n            // Fallback if not selected\n            ;(data as any).version = {}\n          }\n          return {\n            ...data,\n            version: await afterRead<T>({\n              collection: null,\n              context: req.context,\n              depth,\n              doc: {\n                ...data.version,\n                // Patch globalType onto version doc\n                globalType: globalConfig.slug,\n              },\n              draft: undefined,\n              fallbackLocale,\n              findMany: true,\n              global: globalConfig,\n              locale,\n              overrideAccess,\n              populate,\n              req,\n              select,\n              showHiddenFields,\n            }),\n          }\n        }),\n      ),\n    } as PaginatedDocs<T>\n\n    // /////////////////////////////////////\n    // afterRead - Global\n    // /////////////////////////////////////\n\n    if (globalConfig.hooks?.afterRead?.length) {\n      result.docs = await Promise.all(\n        result.docs.map(async (doc) => {\n          const docRef = doc\n\n          for (const hook of globalConfig.hooks.afterRead) {\n            docRef.version =\n              (await hook({\n                context: req.context,\n                doc: doc.version,\n                findMany: true,\n                global: globalConfig,\n                query: fullWhere,\n                req,\n              })) || doc.version\n          }\n\n          return docRef\n        }),\n      )\n    }\n\n    // /////////////////////////////////////\n    // Return results\n    // /////////////////////////////////////\n\n    result = {\n      ...result,\n      docs: result.docs.map((doc) => sanitizeInternalFields<T>(doc)),\n    }\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(req)\n    throw error\n  }\n}\n"],"names":["executeAccess","combineQueries","validateQueryPaths","afterRead","killTransaction","sanitizeInternalFields","sanitizeSelect","buildVersionGlobalFields","getQueryDraftsSelect","findVersionsOperation","args","depth","globalConfig","limit","overrideAccess","page","pagination","populate","req","fallbackLocale","locale","payload","select","incomingSelect","showHiddenFields","sort","where","versionFields","config","accessResults","access","readVersions","fullWhere","fields","forceSelect","versions","paginatedDocs","db","findGlobalVersions","global","slug","result","docs","Promise","all","map","data","version","collection","context","doc","globalType","draft","undefined","findMany","hooks","length","docRef","hook","query","error"],"mappings":"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"}
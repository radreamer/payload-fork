{"version":3,"sources":["../../../src/globals/operations/findOne.ts"],"sourcesContent":["// @ts-strict-ignore\nimport type { AccessResult } from '../../config/types.js'\nimport type { PayloadRequest, PopulateType, SelectType, Where } from '../../types/index.js'\nimport type { SanitizedGlobalConfig } from '../config/types.js'\n\nimport executeAccess from '../../auth/executeAccess.js'\nimport { afterRead } from '../../fields/hooks/afterRead/index.js'\nimport { lockedDocumentsCollectionSlug } from '../../locked-documents/config.js'\nimport { getSelectMode } from '../../utilities/getSelectMode.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport { sanitizeSelect } from '../../utilities/sanitizeSelect.js'\nimport replaceWithDraftIfAvailable from '../../versions/drafts/replaceWithDraftIfAvailable.js'\n\ntype Args = {\n  depth?: number\n  draft?: boolean\n  globalConfig: SanitizedGlobalConfig\n  includeLockStatus?: boolean\n  overrideAccess?: boolean\n  populate?: PopulateType\n  req: PayloadRequest\n  select?: SelectType\n  showHiddenFields?: boolean\n  slug: string\n}\n\nexport const findOneOperation = async <T extends Record<string, unknown>>(\n  args: Args,\n): Promise<T> => {\n  const {\n    slug,\n    depth,\n    draft: draftEnabled = false,\n    globalConfig,\n    includeLockStatus,\n    overrideAccess = false,\n    populate,\n    req: { fallbackLocale, locale },\n    req,\n    select: incomingSelect,\n    showHiddenFields,\n  } = args\n\n  try {\n    // /////////////////////////////////////\n    // Retrieve and execute access\n    // /////////////////////////////////////\n\n    let accessResult: AccessResult\n\n    if (!overrideAccess) {\n      accessResult = await executeAccess({ req }, globalConfig.access.read)\n    }\n\n    const select = sanitizeSelect({\n      fields: globalConfig.flattenedFields,\n      forceSelect: globalConfig.forceSelect,\n      select: incomingSelect,\n    })\n\n    // /////////////////////////////////////\n    // Perform database operation\n    // /////////////////////////////////////\n\n    let doc = await req.payload.db.findGlobal({\n      slug,\n      locale,\n      req,\n      select,\n      where: overrideAccess ? undefined : (accessResult as Where),\n    })\n    if (!doc) {\n      doc = {}\n    }\n\n    // /////////////////////////////////////\n    // Include Lock Status if required\n    // /////////////////////////////////////\n    if (includeLockStatus && slug) {\n      let lockStatus = null\n\n      try {\n        const lockDocumentsProp = globalConfig?.lockDocuments\n\n        const lockDurationDefault = 300 // Default 5 minutes in seconds\n        const lockDuration =\n          typeof lockDocumentsProp === 'object' ? lockDocumentsProp.duration : lockDurationDefault\n        const lockDurationInMilliseconds = lockDuration * 1000\n\n        const lockedDocument = await req.payload.find({\n          collection: lockedDocumentsCollectionSlug,\n          depth: 1,\n          limit: 1,\n          overrideAccess: false,\n          pagination: false,\n          req,\n          where: {\n            and: [\n              {\n                globalSlug: {\n                  equals: slug,\n                },\n              },\n              {\n                updatedAt: {\n                  greater_than: new Date(new Date().getTime() - lockDurationInMilliseconds),\n                },\n              },\n            ],\n          },\n        })\n\n        if (lockedDocument && lockedDocument.docs.length > 0) {\n          lockStatus = lockedDocument.docs[0]\n        }\n      } catch {\n        // swallow error\n      }\n\n      doc._isLocked = !!lockStatus\n      doc._userEditing = lockStatus?.user?.value ?? null\n    }\n\n    // /////////////////////////////////////\n    // Replace document with draft if available\n    // /////////////////////////////////////\n\n    if (globalConfig.versions?.drafts && draftEnabled) {\n      doc = await replaceWithDraftIfAvailable({\n        accessResult,\n        doc,\n        entity: globalConfig,\n        entityType: 'global',\n        overrideAccess,\n        req,\n        select,\n      })\n    }\n\n    // /////////////////////////////////////\n    // Execute before global hook\n    // /////////////////////////////////////\n\n    if (globalConfig.hooks?.beforeRead?.length) {\n      for (const hook of globalConfig.hooks.beforeRead) {\n        doc =\n          (await hook({\n            context: req.context,\n            doc,\n            global: globalConfig,\n            req,\n          })) || doc\n      }\n    }\n\n    // /////////////////////////////////////\n    // Execute globalType field if not selected\n    // /////////////////////////////////////\n    if (select && doc.globalType) {\n      const selectMode = getSelectMode(select)\n      if (\n        (selectMode === 'include' && !select['globalType']) ||\n        (selectMode === 'exclude' && select['globalType'] === false)\n      ) {\n        delete doc['globalType']\n      }\n    }\n\n    // /////////////////////////////////////\n    // Execute field-level hooks and access\n    // /////////////////////////////////////\n\n    doc = await afterRead({\n      collection: null,\n      context: req.context,\n      depth,\n      doc,\n      draft: draftEnabled,\n      fallbackLocale,\n      global: globalConfig,\n      locale,\n      overrideAccess,\n      populate,\n      req,\n      select,\n      showHiddenFields,\n    })\n\n    // /////////////////////////////////////\n    // Execute after global hook\n    // /////////////////////////////////////\n\n    if (globalConfig.hooks?.afterRead?.length) {\n      for (const hook of globalConfig.hooks.afterRead) {\n        doc =\n          (await hook({\n            context: req.context,\n            doc,\n            global: globalConfig,\n            req,\n          })) || doc\n      }\n    }\n\n    // /////////////////////////////////////\n    // Return results\n    // /////////////////////////////////////\n\n    return doc\n  } catch (error: unknown) {\n    await killTransaction(req)\n    throw error\n  }\n}\n"],"names":["executeAccess","afterRead","lockedDocumentsCollectionSlug","getSelectMode","killTransaction","sanitizeSelect","replaceWithDraftIfAvailable","findOneOperation","args","slug","depth","draft","draftEnabled","globalConfig","includeLockStatus","overrideAccess","populate","req","fallbackLocale","locale","select","incomingSelect","showHiddenFields","accessResult","access","read","fields","flattenedFields","forceSelect","doc","payload","db","findGlobal","where","undefined","lockStatus","lockDocumentsProp","lockDocuments","lockDurationDefault","lockDuration","duration","lockDurationInMilliseconds","lockedDocument","find","collection","limit","pagination","and","globalSlug","equals","updatedAt","greater_than","Date","getTime","docs","length","_isLocked","_userEditing","user","value","versions","drafts","entity","entityType","hooks","beforeRead","hook","context","global","globalType","selectMode","error"],"mappings":"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"}
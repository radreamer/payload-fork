{"version":3,"sources":["../../../src/collections/endpoints/updateByID.ts"],"sourcesContent":["// @ts-strict-ignore\nimport { status as httpStatus } from 'http-status'\n\nimport type { PayloadHandler } from '../../config/types.js'\n\nimport { getRequestCollectionWithID } from '../../utilities/getRequestEntity.js'\nimport { headersWithCors } from '../../utilities/headersWithCors.js'\nimport { isNumber } from '../../utilities/isNumber.js'\nimport { sanitizePopulateParam } from '../../utilities/sanitizePopulateParam.js'\nimport { sanitizeSelectParam } from '../../utilities/sanitizeSelectParam.js'\nimport { updateByIDOperation } from '../operations/updateByID.js'\n\nexport const updateByIDHandler: PayloadHandler = async (req) => {\n  const { id, collection } = getRequestCollectionWithID(req)\n  const { searchParams } = req\n  const depth = searchParams.get('depth')\n  const autosave = searchParams.get('autosave') === 'true'\n  const draft = searchParams.get('draft') === 'true'\n  const overrideLock = searchParams.get('overrideLock')\n  const publishSpecificLocale = req.query.publishSpecificLocale as string | undefined\n\n  const doc = await updateByIDOperation({\n    id,\n    autosave,\n    collection,\n    data: req.data,\n    depth: isNumber(depth) ? Number(depth) : undefined,\n    draft,\n    overrideLock: Boolean(overrideLock === 'true'),\n    populate: sanitizePopulateParam(req.query.populate),\n    publishSpecificLocale,\n    req,\n    select: sanitizeSelectParam(req.query.select),\n  })\n\n  let message = req.t('general:updatedSuccessfully')\n\n  if (draft) {\n    message = req.t('version:draftSavedSuccessfully')\n  }\n  if (autosave) {\n    message = req.t('version:autosavedSuccessfully')\n  }\n\n  return Response.json(\n    {\n      doc,\n      message,\n    },\n    {\n      headers: headersWithCors({\n        headers: new Headers(),\n        req,\n      }),\n      status: httpStatus.OK,\n    },\n  )\n}\n"],"names":["status","httpStatus","getRequestCollectionWithID","headersWithCors","isNumber","sanitizePopulateParam","sanitizeSelectParam","updateByIDOperation","updateByIDHandler","req","id","collection","searchParams","depth","get","autosave","draft","overrideLock","publishSpecificLocale","query","doc","data","Number","undefined","Boolean","populate","select","message","t","Response","json","headers","Headers","OK"],"mappings":"AAAA,oBAAoB;AACpB,SAASA,UAAUC,UAAU,QAAQ,cAAa;AAIlD,SAASC,0BAA0B,QAAQ,sCAAqC;AAChF,SAASC,eAAe,QAAQ,qCAAoC;AACpE,SAASC,QAAQ,QAAQ,8BAA6B;AACtD,SAASC,qBAAqB,QAAQ,2CAA0C;AAChF,SAASC,mBAAmB,QAAQ,yCAAwC;AAC5E,SAASC,mBAAmB,QAAQ,8BAA6B;AAEjE,OAAO,MAAMC,oBAAoC,OAAOC;IACtD,MAAM,EAAEC,EAAE,EAAEC,UAAU,EAAE,GAAGT,2BAA2BO;IACtD,MAAM,EAAEG,YAAY,EAAE,GAAGH;IACzB,MAAMI,QAAQD,aAAaE,GAAG,CAAC;IAC/B,MAAMC,WAAWH,aAAaE,GAAG,CAAC,gBAAgB;IAClD,MAAME,QAAQJ,aAAaE,GAAG,CAAC,aAAa;IAC5C,MAAMG,eAAeL,aAAaE,GAAG,CAAC;IACtC,MAAMI,wBAAwBT,IAAIU,KAAK,CAACD,qBAAqB;IAE7D,MAAME,MAAM,MAAMb,oBAAoB;QACpCG;QACAK;QACAJ;QACAU,MAAMZ,IAAIY,IAAI;QACdR,OAAOT,SAASS,SAASS,OAAOT,SAASU;QACzCP;QACAC,cAAcO,QAAQP,iBAAiB;QACvCQ,UAAUpB,sBAAsBI,IAAIU,KAAK,CAACM,QAAQ;QAClDP;QACAT;QACAiB,QAAQpB,oBAAoBG,IAAIU,KAAK,CAACO,MAAM;IAC9C;IAEA,IAAIC,UAAUlB,IAAImB,CAAC,CAAC;IAEpB,IAAIZ,OAAO;QACTW,UAAUlB,IAAImB,CAAC,CAAC;IAClB;IACA,IAAIb,UAAU;QACZY,UAAUlB,IAAImB,CAAC,CAAC;IAClB;IAEA,OAAOC,SAASC,IAAI,CAClB;QACEV;QACAO;IACF,GACA;QACEI,SAAS5B,gBAAgB;YACvB4B,SAAS,IAAIC;YACbvB;QACF;QACAT,QAAQC,WAAWgC,EAAE;IACvB;AAEJ,EAAC"}
{"version":3,"sources":["../../../src/collections/config/types.ts"],"sourcesContent":["import type { GraphQLInputObjectType, GraphQLNonNull, GraphQLObjectType } from 'graphql'\nimport type { DeepRequired, IsAny, MarkOptional } from 'ts-essentials'\n\nimport type { CustomUpload } from '../../admin/types.js'\nimport type { Arguments as MeArguments } from '../../auth/operations/me.js'\nimport type {\n  Arguments as RefreshArguments,\n  Result as RefreshResult,\n} from '../../auth/operations/refresh.js'\nimport type { Auth, ClientUser, IncomingAuthType } from '../../auth/types.js'\nimport type {\n  Access,\n  AfterErrorHookArgs,\n  AfterErrorResult,\n  CustomComponent,\n  EditConfig,\n  Endpoint,\n  EntityDescription,\n  EntityDescriptionComponent,\n  GeneratePreviewURL,\n  LabelFunction,\n  LivePreviewConfig,\n  MetaConfig,\n  PayloadComponent,\n  StaticLabel,\n} from '../../config/types.js'\nimport type { DBIdentifierName } from '../../database/types.js'\nimport type {\n  Field,\n  FlattenedField,\n  JoinField,\n  RelationshipField,\n  UploadField,\n} from '../../fields/config/types.js'\nimport type {\n  CollectionSlug,\n  JsonObject,\n  RequestContext,\n  TypedAuthOperations,\n  TypedCollection,\n  TypedCollectionSelect,\n  TypedLocale,\n} from '../../index.js'\nimport type {\n  PayloadRequest,\n  SelectIncludeType,\n  SelectType,\n  Sort,\n  TransformCollectionWithSelect,\n  Where,\n} from '../../types/index.js'\nimport type { SanitizedUploadConfig, UploadConfig } from '../../uploads/types.js'\nimport type {\n  IncomingCollectionVersions,\n  SanitizedCollectionVersions,\n} from '../../versions/types.js'\nimport type { AfterOperationArg, AfterOperationMap } from '../operations/utils.js'\n\nexport type DataFromCollectionSlug<TSlug extends CollectionSlug> = TypedCollection[TSlug]\n\nexport type SelectFromCollectionSlug<TSlug extends CollectionSlug> = TypedCollectionSelect[TSlug]\n\nexport type AuthOperationsFromCollectionSlug<TSlug extends CollectionSlug> =\n  TypedAuthOperations[TSlug]\n\nexport type RequiredDataFromCollection<TData extends JsonObject> = MarkOptional<\n  TData,\n  'createdAt' | 'id' | 'sizes' | 'updatedAt'\n>\n\nexport type RequiredDataFromCollectionSlug<TSlug extends CollectionSlug> =\n  RequiredDataFromCollection<DataFromCollectionSlug<TSlug>>\n\nexport type HookOperationType =\n  | 'autosave'\n  | 'count'\n  | 'countVersions'\n  | 'create'\n  | 'delete'\n  | 'forgotPassword'\n  | 'login'\n  | 'read'\n  | 'refresh'\n  | 'update'\n\ntype CreateOrUpdateOperation = Extract<HookOperationType, 'create' | 'update'>\n\nexport type BeforeOperationHook = (args: {\n  args?: any\n  /** The collection which this hook is being run on */\n  collection: SanitizedCollectionConfig\n  context: RequestContext\n  /**\n   * Hook operation being performed\n   */\n  operation: HookOperationType\n  req: PayloadRequest\n}) => any\n\nexport type BeforeValidateHook<T extends TypeWithID = any> = (args: {\n  /** The collection which this hook is being run on */\n  collection: SanitizedCollectionConfig\n  context: RequestContext\n  data?: Partial<T>\n  /**\n   * Hook operation being performed\n   */\n  operation: CreateOrUpdateOperation\n  /**\n   * Original document before change\n   *\n   * `undefined` on 'create' operation\n   */\n  originalDoc?: T\n  req: PayloadRequest\n}) => any\n\nexport type BeforeChangeHook<T extends TypeWithID = any> = (args: {\n  /** The collection which this hook is being run on */\n  collection: SanitizedCollectionConfig\n  context: RequestContext\n  data: Partial<T>\n  /**\n   * Hook operation being performed\n   */\n  operation: CreateOrUpdateOperation\n  /**\n   * Original document before change\n   *\n   * `undefined` on 'create' operation\n   */\n  originalDoc?: T\n  req: PayloadRequest\n}) => any\n\nexport type AfterChangeHook<T extends TypeWithID = any> = (args: {\n  /** The collection which this hook is being run on */\n  collection: SanitizedCollectionConfig\n  context: RequestContext\n  doc: T\n  /**\n   * Hook operation being performed\n   */\n  operation: CreateOrUpdateOperation\n  previousDoc: T\n  req: PayloadRequest\n}) => any\n\nexport type BeforeReadHook<T extends TypeWithID = any> = (args: {\n  /** The collection which this hook is being run on */\n  collection: SanitizedCollectionConfig\n  context: RequestContext\n  doc: T\n  query: { [key: string]: any }\n  req: PayloadRequest\n}) => any\n\nexport type AfterReadHook<T extends TypeWithID = any> = (args: {\n  /** The collection which this hook is being run on */\n  collection: SanitizedCollectionConfig\n  context: RequestContext\n  doc: T\n  findMany?: boolean\n  query?: { [key: string]: any }\n  req: PayloadRequest\n}) => any\n\nexport type BeforeDeleteHook = (args: {\n  /** The collection which this hook is being run on */\n  collection: SanitizedCollectionConfig\n  context: RequestContext\n  id: number | string\n  req: PayloadRequest\n}) => any\n\nexport type AfterDeleteHook<T extends TypeWithID = any> = (args: {\n  /** The collection which this hook is being run on */\n  collection: SanitizedCollectionConfig\n  context: RequestContext\n  doc: T\n  id: number | string\n  req: PayloadRequest\n}) => any\n\nexport type AfterOperationHook<TOperationGeneric extends CollectionSlug = string> = (\n  arg: AfterOperationArg<TOperationGeneric>,\n) =>\n  | Awaited<\n      ReturnType<AfterOperationMap<TOperationGeneric>[keyof AfterOperationMap<TOperationGeneric>]>\n    >\n  | Promise<\n      Awaited<\n        ReturnType<AfterOperationMap<TOperationGeneric>[keyof AfterOperationMap<TOperationGeneric>]>\n      >\n    >\n\nexport type BeforeLoginHook<T extends TypeWithID = any> = (args: {\n  /** The collection which this hook is being run on */\n  collection: SanitizedCollectionConfig\n  context: RequestContext\n  req: PayloadRequest\n  user: T\n}) => any\n\nexport type AfterLoginHook<T extends TypeWithID = any> = (args: {\n  /** The collection which this hook is being run on */\n  collection: SanitizedCollectionConfig\n  context: RequestContext\n  req: PayloadRequest\n  token: string\n  user: T\n}) => any\n\nexport type AfterLogoutHook<T extends TypeWithID = any> = (args: {\n  /** The collection which this hook is being run on */\n  collection: SanitizedCollectionConfig\n  context: RequestContext\n  req: PayloadRequest\n}) => any\n\nexport type AfterMeHook<T extends TypeWithID = any> = (args: {\n  /** The collection which this hook is being run on */\n  collection: SanitizedCollectionConfig\n  context: RequestContext\n  req: PayloadRequest\n  response: unknown\n}) => any\n\nexport type RefreshHook<T extends TypeWithID = any> = (args: {\n  args: RefreshArguments\n  user: T\n}) => Promise<RefreshResult | void> | (RefreshResult | void)\n\nexport type MeHook<T extends TypeWithID = any> = (args: {\n  args: MeArguments\n  user: T\n}) => ({ exp: number; user: T } | void) | Promise<{ exp: number; user: T } | void>\n\nexport type AfterRefreshHook<T extends TypeWithID = any> = (args: {\n  /** The collection which this hook is being run on */\n  collection: SanitizedCollectionConfig\n  context: RequestContext\n  exp: number\n  req: PayloadRequest\n  token: string\n}) => any\n\nexport type AfterErrorHook = (\n  args: { collection: SanitizedCollectionConfig } & AfterErrorHookArgs,\n) => AfterErrorResult | Promise<AfterErrorResult>\n\nexport type AfterForgotPasswordHook = (args: {\n  args?: any\n  /** The collection which this hook is being run on */\n  collection: SanitizedCollectionConfig\n  context: RequestContext\n}) => any\n\nexport type BaseListFilter = (args: {\n  limit: number\n  locale?: TypedLocale\n  page: number\n  req: PayloadRequest\n  sort: string\n}) => null | Promise<null | Where> | Where\n\nexport type CollectionAdminOptions = {\n  baseListFilter?: BaseListFilter\n  /**\n   * Custom admin components\n   */\n  components?: {\n    afterList?: CustomComponent[]\n    afterListTable?: CustomComponent[]\n    beforeList?: CustomComponent[]\n    beforeListTable?: CustomComponent[]\n    Description?: EntityDescriptionComponent\n    /**\n     * Components within the edit view\n     */\n    edit?: {\n      /**\n       * Inject custom components before the document controls\n       */\n      beforeDocumentControls?: CustomComponent[]\n      /**\n       * Replaces the \"Preview\" button\n       */\n      PreviewButton?: CustomComponent\n      /**\n       * Replaces the \"Publish\" button\n       * + drafts must be enabled\n       */\n      PublishButton?: CustomComponent\n      /**\n       * Replaces the \"Save\" button\n       * + drafts must be disabled\n       */\n      SaveButton?: CustomComponent\n      /**\n       * Replaces the \"Save Draft\" button\n       * + drafts must be enabled\n       * + autosave must be disabled\n       */\n      SaveDraftButton?: CustomComponent\n      /**\n       * Replaces the \"Upload\" section\n       * + upload must be enabled\n       */\n      Upload?: CustomUpload\n    }\n    listMenuItems?: CustomComponent[]\n    views?: {\n      /**\n       * Set to a React component to replace the entire Edit View, including all nested routes.\n       * Set to an object to replace or modify individual nested routes, or to add new ones.\n       */\n      edit?: EditConfig\n      list?: {\n        actions?: CustomComponent[]\n        Component?: PayloadComponent\n      }\n    }\n  }\n  /** Extension point to add your custom data. Available in server and client. */\n  custom?: Record<string, any>\n  /**\n   * Default columns to show in list view\n   */\n  defaultColumns?: string[]\n  /**\n   * Custom description for collection. This will also be used as JSDoc for the generated types\n   */\n  description?: EntityDescription\n  /**\n   * Disable the Copy To Locale button in the edit document view\n   * @default false\n   */\n  disableCopyToLocale?: boolean\n  enableRichTextLink?: boolean\n  enableRichTextRelationship?: boolean\n  /**\n   * Specify a navigational group for collections in the admin sidebar.\n   * - Provide a string to place the entity in a custom group.\n   * - Provide a record to define localized group names.\n   * - Set to `false` to exclude the entity from the sidebar / dashboard without disabling its routes.\n   */\n  group?: false | Record<string, string> | string\n  /**\n   * Exclude the collection from the admin nav and routes\n   */\n  hidden?: ((args: { user: ClientUser }) => boolean) | boolean\n  /**\n   * Hide the API URL within the Edit view\n   */\n  hideAPIURL?: boolean\n  /**\n   * Additional fields to be searched via the full text search\n   */\n  listSearchableFields?: string[]\n  /**\n   * Live preview options\n   */\n  livePreview?: LivePreviewConfig\n  meta?: MetaConfig\n  pagination?: {\n    defaultLimit?: number\n    limits?: number[]\n  }\n  /**\n   * Function to generate custom preview URL\n   */\n  preview?: GeneratePreviewURL\n  /**\n   * Field to use as title in Edit View and first column in List view\n   */\n  useAsTitle?: string\n}\n\n/** Manage all aspects of a data collection */\nexport type CollectionConfig<TSlug extends CollectionSlug = any> = {\n  /**\n   * Do not set this property manually. This is set to true during sanitization, to avoid\n   * sanitizing the same collection multiple times.\n   */\n  _sanitized?: boolean\n  /**\n   * Access control\n   */\n  access?: {\n    admin?: ({ req }: { req: PayloadRequest }) => boolean | Promise<boolean>\n    create?: Access\n    delete?: Access\n    read?: Access\n    readVersions?: Access\n    unlock?: Access\n    update?: Access\n  }\n  /**\n   * Collection admin options\n   */\n  admin?: CollectionAdminOptions\n  /**\n   * Collection login options\n   *\n   * Use `true` to enable with default options\n   */\n  auth?: boolean | IncomingAuthType\n  /** Extension point to add your custom data. Server only. */\n  custom?: Record<string, any>\n  /**\n   * Used to override the default naming of the database table or collection with your using a function or string\n   * @WARNING: If you change this property with existing data, you will need to handle the renaming of the table in your database or by using migrations\n   */\n  dbName?: DBIdentifierName\n  defaultPopulate?: IsAny<SelectFromCollectionSlug<TSlug>> extends true\n    ? SelectType\n    : SelectFromCollectionSlug<TSlug>\n  /**\n   * Default field to sort by in collection list view\n   */\n  defaultSort?: Sort\n  /**\n   * When true, do not show the \"Duplicate\" button while editing documents within this collection and prevent `duplicate` from all APIs\n   */\n  disableDuplicate?: boolean\n  /**\n   * Opt-in to enable query presets for this collection.\n   * @see https://payloadcms.com/docs/query-presets/overview\n   */\n  enableQueryPresets?: boolean\n  /**\n   * Custom rest api endpoints, set false to disable all rest endpoints for this collection.\n   */\n  endpoints?: false | Omit<Endpoint, 'root'>[]\n  fields: Field[]\n  /**\n   * Specify which fields should be selected always, regardless of the `select` query which can be useful that the field exists for access control / hooks\n   */\n  forceSelect?: IsAny<SelectFromCollectionSlug<TSlug>> extends true\n    ? SelectIncludeType\n    : SelectFromCollectionSlug<TSlug>\n  /**\n   * GraphQL configuration\n   */\n  graphQL?:\n    | {\n        disableMutations?: true\n        disableQueries?: true\n        pluralName?: string\n        singularName?: string\n      }\n    | false\n  /**\n   * Hooks to modify Payload functionality\n   */\n  hooks?: {\n    afterChange?: AfterChangeHook[]\n    afterDelete?: AfterDeleteHook[]\n    afterError?: AfterErrorHook[]\n    afterForgotPassword?: AfterForgotPasswordHook[]\n    afterLogin?: AfterLoginHook[]\n    afterLogout?: AfterLogoutHook[]\n    afterMe?: AfterMeHook[]\n    afterOperation?: AfterOperationHook<TSlug>[]\n    afterRead?: AfterReadHook[]\n    afterRefresh?: AfterRefreshHook[]\n    beforeChange?: BeforeChangeHook[]\n    beforeDelete?: BeforeDeleteHook[]\n    beforeLogin?: BeforeLoginHook[]\n    beforeOperation?: BeforeOperationHook[]\n    beforeRead?: BeforeReadHook[]\n    beforeValidate?: BeforeValidateHook[]\n    /**\n    /**\n     * Use the `me` hook to control the `me` operation.\n     * Here, you can optionally instruct the me operation to return early,\n     * and skip its default logic.\n     */\n    me?: MeHook[]\n    /**\n     * Use the `refresh` hook to control the refresh operation.\n     * Here, you can optionally instruct the refresh operation to return early,\n     * and skip its default logic.\n     */\n    refresh?: RefreshHook[]\n  }\n  /**\n   * Define compound indexes for this collection.\n   * This can be used to either speed up querying/sorting by 2 or more fields at the same time or\n   * to ensure uniqueness between several fields.\n   * Specify field paths\n   * @example\n   * [{ unique: true, fields: ['title', 'group.name'] }]\n   * @default []\n   */\n  indexes?: CompoundIndex[]\n  /**\n   * Label configuration\n   */\n  labels?: {\n    plural?: LabelFunction | StaticLabel\n    singular?: LabelFunction | StaticLabel\n  }\n  /**\n   * Enables / Disables the ability to lock documents while editing\n   * @default true\n   */\n  lockDocuments?:\n    | {\n        duration: number\n      }\n    | false\n  /**\n   * If true, enables custom ordering for the collection, and documents in the listView can be reordered via drag and drop.\n   * New documents are inserted at the end of the list according to this parameter.\n   *\n   * Under the hood, a field with {@link https://observablehq.com/@dgreensp/implementing-fractional-indexing|fractional indexing} is used to optimize inserts and reorderings.\n   *\n   * @default false\n   *\n   * @experimental There may be frequent breaking changes to this API\n   */\n  orderable?: boolean\n  slug: string\n  /**\n   * Add `createdAt` and `updatedAt` fields\n   *\n   * @default true\n   */\n  timestamps?: boolean\n  /**\n   * Options used in typescript generation\n   */\n  typescript?: {\n    /**\n     * Typescript generation name given to the interface type\n     */\n    interface?: string\n  }\n  /**\n   * Customize the handling of incoming file uploads\n   *\n   * @default false // disable uploads\n   */\n  upload?: boolean | UploadConfig\n  /**\n   * Enable versioning. Set it to true to enable default versions settings,\n   * or customize versions options by setting the property equal to an object\n   * containing the version options.\n   *\n   * @default false // disable versioning\n   */\n  versions?: boolean | IncomingCollectionVersions\n}\n\nexport type SanitizedJoin = {\n  /**\n   * The field configuration defining the join\n   */\n  field: JoinField\n  getForeignPath?(args: { locale?: TypedLocale }): string\n  /**\n   * The path of the join field in dot notation\n   */\n  joinPath: string\n  /**\n   * `parentIsLocalized` is true if any parent field of the\n   * field configuration defining the join is localized\n   */\n  parentIsLocalized: boolean\n  targetField: RelationshipField | UploadField\n}\n\nexport type SanitizedJoins = {\n  [collectionSlug: string]: SanitizedJoin[]\n}\n\n/**\n * @todo remove the `DeepRequired` in v4.\n * We don't actually guarantee that all properties are set when sanitizing configs.\n */\nexport interface SanitizedCollectionConfig\n  extends Omit<\n    DeepRequired<CollectionConfig>,\n    'auth' | 'endpoints' | 'fields' | 'slug' | 'upload' | 'versions'\n  > {\n  auth: Auth\n  endpoints: Endpoint[] | false\n  fields: Field[]\n  /**\n   * Fields in the database schema structure\n   * Rows / collapsible / tabs w/o name `fields` merged to top, UIs are excluded\n   */\n  flattenedFields: FlattenedField[]\n  /**\n   * Object of collections to join 'Join Fields object keyed by collection\n   */\n  joins: SanitizedJoins\n\n  /**\n   * List of all polymorphic join fields\n   */\n  polymorphicJoins: SanitizedJoin[]\n\n  sanitizedIndexes: SanitizedCompoundIndex[]\n\n  slug: CollectionSlug\n  upload: SanitizedUploadConfig\n  versions: SanitizedCollectionVersions\n}\n\nexport type Collection = {\n  config: SanitizedCollectionConfig\n  customIDType?: 'number' | 'text'\n  graphQL?: {\n    countType: GraphQLObjectType\n    JWT: GraphQLObjectType\n    mutationInputType: GraphQLNonNull<any>\n    paginatedType: GraphQLObjectType\n    type: GraphQLObjectType\n    updateMutationInputType: GraphQLNonNull<any>\n    versionType: GraphQLObjectType\n    whereInputType: GraphQLInputObjectType\n  }\n}\n\nexport type BulkOperationResult<TSlug extends CollectionSlug, TSelect extends SelectType> = {\n  docs: TransformCollectionWithSelect<TSlug, TSelect>[]\n  errors: {\n    id: DataFromCollectionSlug<TSlug>['id']\n    message: string\n  }[]\n}\n\nexport type AuthCollection = {\n  config: SanitizedCollectionConfig\n}\n\nexport type TypeWithID = {\n  docId?: any\n  id: number | string\n}\n\nexport type TypeWithTimestamps = {\n  [key: string]: unknown\n  createdAt: string\n  id: number | string\n  updatedAt: string\n}\n\nexport type CompoundIndex = {\n  fields: string[]\n  unique?: boolean\n}\n\nexport type SanitizedCompoundIndex = {\n  fields: {\n    field: FlattenedField\n    localizedPath: string\n    path: string\n    pathHasLocalized: boolean\n  }[]\n  unique: boolean\n}\n"],"names":[],"mappings":"AAgpBA,WAQC"}
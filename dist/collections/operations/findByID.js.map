{"version":3,"sources":["../../../src/collections/operations/findByID.ts"],"sourcesContent":["// @ts-strict-ignore\nimport type { FindOneArgs } from '../../database/types.js'\nimport type { CollectionSlug, JoinQuery } from '../../index.js'\nimport type {\n  ApplyDisableErrors,\n  PayloadRequest,\n  PopulateType,\n  SelectType,\n  TransformCollectionWithSelect,\n} from '../../types/index.js'\nimport type {\n  Collection,\n  DataFromCollectionSlug,\n  SelectFromCollectionSlug,\n} from '../config/types.js'\n\nimport executeAccess from '../../auth/executeAccess.js'\nimport { combineQueries } from '../../database/combineQueries.js'\nimport { sanitizeJoinQuery } from '../../database/sanitizeJoinQuery.js'\nimport { NotFound } from '../../errors/index.js'\nimport { afterRead } from '../../fields/hooks/afterRead/index.js'\nimport { validateQueryPaths } from '../../index.js'\nimport { lockedDocumentsCollectionSlug } from '../../locked-documents/config.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport { sanitizeSelect } from '../../utilities/sanitizeSelect.js'\nimport replaceWithDraftIfAvailable from '../../versions/drafts/replaceWithDraftIfAvailable.js'\nimport { buildAfterOperation } from './utils.js'\n\nexport type Arguments = {\n  collection: Collection\n  currentDepth?: number\n  depth?: number\n  disableErrors?: boolean\n  draft?: boolean\n  id: number | string\n  includeLockStatus?: boolean\n  joins?: JoinQuery\n  overrideAccess?: boolean\n  populate?: PopulateType\n  req: PayloadRequest\n  select?: SelectType\n  showHiddenFields?: boolean\n}\n\nexport const findByIDOperation = async <\n  TSlug extends CollectionSlug,\n  TDisableErrors extends boolean,\n  TSelect extends SelectFromCollectionSlug<TSlug>,\n>(\n  incomingArgs: Arguments,\n): Promise<ApplyDisableErrors<TransformCollectionWithSelect<TSlug, TSelect>, TDisableErrors>> => {\n  let args = incomingArgs\n\n  try {\n    // /////////////////////////////////////\n    // beforeOperation - Collection\n    // /////////////////////////////////////\n\n    if (args.collection.config.hooks?.beforeOperation?.length) {\n      for (const hook of args.collection.config.hooks.beforeOperation) {\n        args =\n          (await hook({\n            args,\n            collection: args.collection.config,\n            context: args.req.context,\n            operation: 'read',\n            req: args.req,\n          })) || args\n      }\n    }\n\n    const {\n      id,\n      collection: { config: collectionConfig },\n      currentDepth,\n      depth,\n      disableErrors,\n      draft: draftEnabled = false,\n      includeLockStatus,\n      joins,\n      overrideAccess = false,\n      populate,\n      req: { fallbackLocale, locale, t },\n      req,\n      select: incomingSelect,\n      showHiddenFields,\n    } = args\n\n    const select = sanitizeSelect({\n      fields: collectionConfig.flattenedFields,\n      forceSelect: collectionConfig.forceSelect,\n      select: incomingSelect,\n    })\n\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    const accessResult = !overrideAccess\n      ? await executeAccess({ id, disableErrors, req }, collectionConfig.access.read)\n      : true\n\n    // If errors are disabled, and access returns false, return null\n    if (accessResult === false) {\n      return null\n    }\n\n    const where = { id: { equals: id } }\n\n    const fullWhere = combineQueries(where, accessResult)\n\n    const sanitizedJoins = await sanitizeJoinQuery({\n      collectionConfig,\n      joins,\n      overrideAccess,\n      req,\n    })\n\n    const findOneArgs: FindOneArgs = {\n      collection: collectionConfig.slug,\n      draftsEnabled: draftEnabled,\n      joins: req.payloadAPI === 'GraphQL' ? false : sanitizedJoins,\n      locale,\n      req: {\n        transactionID: req.transactionID,\n      } as PayloadRequest,\n      select,\n      where: fullWhere,\n    }\n\n    // execute only if there's a custom ID and potentially overwriten access on id\n    if (req.payload.collections[collectionConfig.slug].customIDType) {\n      await validateQueryPaths({\n        collectionConfig,\n        overrideAccess,\n        req,\n        where,\n      })\n    }\n    // /////////////////////////////////////\n    // Find by ID\n    // /////////////////////////////////////\n\n    if (!findOneArgs.where.and[0].id) {\n      throw new NotFound(t)\n    }\n\n    let result: DataFromCollectionSlug<TSlug> = await req.payload.db.findOne(findOneArgs)\n\n    if (!result) {\n      if (!disableErrors) {\n        throw new NotFound(req.t)\n      }\n\n      return null\n    }\n\n    // /////////////////////////////////////\n    // Include Lock Status if required\n    // /////////////////////////////////////\n\n    if (includeLockStatus && id) {\n      let lockStatus = null\n\n      try {\n        const lockDocumentsProp = collectionConfig?.lockDocuments\n\n        const lockDurationDefault = 300 // Default 5 minutes in seconds\n        const lockDuration =\n          typeof lockDocumentsProp === 'object' ? lockDocumentsProp.duration : lockDurationDefault\n        const lockDurationInMilliseconds = lockDuration * 1000\n\n        const lockedDocument = await req.payload.find({\n          collection: lockedDocumentsCollectionSlug,\n          depth: 1,\n          limit: 1,\n          overrideAccess: false,\n          pagination: false,\n          req,\n          where: {\n            and: [\n              {\n                'document.relationTo': {\n                  equals: collectionConfig.slug,\n                },\n              },\n              {\n                'document.value': {\n                  equals: id,\n                },\n              },\n              // Query where the lock is newer than the current time minus lock time\n              {\n                updatedAt: {\n                  greater_than: new Date(new Date().getTime() - lockDurationInMilliseconds),\n                },\n              },\n            ],\n          },\n        })\n\n        if (lockedDocument && lockedDocument.docs.length > 0) {\n          lockStatus = lockedDocument.docs[0]\n        }\n      } catch {\n        // swallow error\n      }\n\n      result._isLocked = !!lockStatus\n      result._userEditing = lockStatus?.user?.value ?? null\n    }\n\n    // /////////////////////////////////////\n    // Replace document with draft if available\n    // /////////////////////////////////////\n\n    if (collectionConfig.versions?.drafts && draftEnabled) {\n      result = await replaceWithDraftIfAvailable({\n        accessResult,\n        doc: result,\n        entity: collectionConfig,\n        entityType: 'collection',\n        overrideAccess,\n        req,\n        select,\n      })\n    }\n\n    // /////////////////////////////////////\n    // beforeRead - Collection\n    // /////////////////////////////////////\n\n    if (collectionConfig.hooks?.beforeRead?.length) {\n      for (const hook of collectionConfig.hooks.beforeRead) {\n        result =\n          (await hook({\n            collection: collectionConfig,\n            context: req.context,\n            doc: result,\n            query: findOneArgs.where,\n            req,\n          })) || result\n      }\n    }\n\n    // /////////////////////////////////////\n    // afterRead - Fields\n    // /////////////////////////////////////\n\n    result = await afterRead({\n      collection: collectionConfig,\n      context: req.context,\n      currentDepth,\n      depth,\n      doc: result,\n      draft: draftEnabled,\n      fallbackLocale,\n      global: null,\n      locale,\n      overrideAccess,\n      populate,\n      req,\n      select,\n      showHiddenFields,\n    })\n\n    // /////////////////////////////////////\n    // afterRead - Collection\n    // /////////////////////////////////////\n\n    if (collectionConfig.hooks?.afterRead?.length) {\n      for (const hook of collectionConfig.hooks.afterRead) {\n        result =\n          (await hook({\n            collection: collectionConfig,\n            context: req.context,\n            doc: result,\n            query: findOneArgs.where,\n            req,\n          })) || result\n      }\n    }\n\n    // /////////////////////////////////////\n    // afterOperation - Collection\n    // /////////////////////////////////////\n\n    result = await buildAfterOperation({\n      args,\n      collection: collectionConfig,\n      operation: 'findByID',\n      result,\n    })\n\n    // /////////////////////////////////////\n    // Return results\n    // /////////////////////////////////////\n\n    return result as ApplyDisableErrors<\n      TransformCollectionWithSelect<TSlug, TSelect>,\n      TDisableErrors\n    >\n  } catch (error: unknown) {\n    await killTransaction(args.req)\n    throw error\n  }\n}\n"],"names":["executeAccess","combineQueries","sanitizeJoinQuery","NotFound","afterRead","validateQueryPaths","lockedDocumentsCollectionSlug","killTransaction","sanitizeSelect","replaceWithDraftIfAvailable","buildAfterOperation","findByIDOperation","incomingArgs","args","collection","config","hooks","beforeOperation","length","hook","context","req","operation","id","collectionConfig","currentDepth","depth","disableErrors","draft","draftEnabled","includeLockStatus","joins","overrideAccess","populate","fallbackLocale","locale","t","select","incomingSelect","showHiddenFields","fields","flattenedFields","forceSelect","accessResult","access","read","where","equals","fullWhere","sanitizedJoins","findOneArgs","slug","draftsEnabled","payloadAPI","transactionID","payload","collections","customIDType","and","result","db","findOne","lockStatus","lockDocumentsProp","lockDocuments","lockDurationDefault","lockDuration","duration","lockDurationInMilliseconds","lockedDocument","find","limit","pagination","updatedAt","greater_than","Date","getTime","docs","_isLocked","_userEditing","user","value","versions","drafts","doc","entity","entityType","beforeRead","query","global","error"],"mappings":"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"}
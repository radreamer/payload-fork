{"version":3,"sources":["../../../src/collections/operations/update.ts"],"sourcesContent":["// @ts-strict-ignore\nimport type { DeepPartial } from 'ts-essentials'\n\nimport { status as httpStatus } from 'http-status'\n\nimport type { AccessResult } from '../../config/types.js'\nimport type { PayloadRequest, PopulateType, SelectType, Sort, Where } from '../../types/index.js'\nimport type {\n  BulkOperationResult,\n  Collection,\n  DataFromCollectionSlug,\n  RequiredDataFromCollectionSlug,\n  SelectFromCollectionSlug,\n} from '../config/types.js'\n\nimport executeAccess from '../../auth/executeAccess.js'\nimport { combineQueries } from '../../database/combineQueries.js'\nimport { validateQueryPaths } from '../../database/queryValidation/validateQueryPaths.js'\nimport { APIError } from '../../errors/index.js'\nimport { type CollectionSlug, deepCopyObjectSimple } from '../../index.js'\nimport { generateFileData } from '../../uploads/generateFileData.js'\nimport { unlinkTempFiles } from '../../uploads/unlinkTempFiles.js'\nimport { commitTransaction } from '../../utilities/commitTransaction.js'\nimport { initTransaction } from '../../utilities/initTransaction.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport { sanitizeSelect } from '../../utilities/sanitizeSelect.js'\nimport { buildVersionCollectionFields } from '../../versions/buildCollectionFields.js'\nimport { appendVersionToQueryKey } from '../../versions/drafts/appendVersionToQueryKey.js'\nimport { getQueryDraftsSort } from '../../versions/drafts/getQueryDraftsSort.js'\nimport { sanitizeSortQuery } from './utilities/sanitizeSortQuery.js'\nimport { updateDocument } from './utilities/update.js'\nimport { buildAfterOperation } from './utils.js'\n\nexport type Arguments<TSlug extends CollectionSlug> = {\n  collection: Collection\n  data: DeepPartial<RequiredDataFromCollectionSlug<TSlug>>\n  depth?: number\n  disableTransaction?: boolean\n  disableVerificationEmail?: boolean\n  draft?: boolean\n  limit?: number\n  overrideAccess?: boolean\n  overrideLock?: boolean\n  overwriteExistingFiles?: boolean\n  populate?: PopulateType\n  publishSpecificLocale?: string\n  req: PayloadRequest\n  select?: SelectType\n  showHiddenFields?: boolean\n  /**\n   * Sort the documents, can be a string or an array of strings\n   * @example '-createdAt' // Sort DESC by createdAt\n   * @example ['group', '-createdAt'] // sort by 2 fields, ASC group and DESC createdAt\n   */\n  sort?: Sort\n  where: Where\n}\n\nexport const updateOperation = async <\n  TSlug extends CollectionSlug,\n  TSelect extends SelectFromCollectionSlug<TSlug>,\n>(\n  incomingArgs: Arguments<TSlug>,\n): Promise<BulkOperationResult<TSlug, TSelect>> => {\n  let args = incomingArgs\n\n  try {\n    const shouldCommit = !args.disableTransaction && (await initTransaction(args.req))\n\n    // /////////////////////////////////////\n    // beforeOperation - Collection\n    // /////////////////////////////////////\n\n    if (args.collection.config.hooks?.beforeOperation?.length) {\n      for (const hook of args.collection.config.hooks.beforeOperation) {\n        args =\n          (await hook({\n            args,\n            collection: args.collection.config,\n            context: args.req.context,\n            operation: 'update',\n            req: args.req,\n          })) || args\n      }\n    }\n\n    const {\n      collection: { config: collectionConfig },\n      collection,\n      depth,\n      draft: draftArg = false,\n      limit = 0,\n      overrideAccess,\n      overrideLock,\n      overwriteExistingFiles = false,\n      populate,\n      publishSpecificLocale,\n      req: {\n        fallbackLocale,\n        locale,\n        payload: { config },\n        payload,\n      },\n      req,\n      select: incomingSelect,\n      showHiddenFields,\n      sort: incomingSort,\n      where,\n    } = args\n\n    if (!where) {\n      throw new APIError(\"Missing 'where' query of documents to update.\", httpStatus.BAD_REQUEST)\n    }\n\n    const { data: bulkUpdateData } = args\n    const shouldSaveDraft = Boolean(draftArg && collectionConfig.versions.drafts)\n\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    let accessResult: AccessResult\n    if (!overrideAccess) {\n      accessResult = await executeAccess({ req }, collectionConfig.access.update)\n    }\n\n    await validateQueryPaths({\n      collectionConfig,\n      overrideAccess,\n      req,\n      where,\n    })\n\n    // /////////////////////////////////////\n    // Retrieve documents\n    // /////////////////////////////////////\n\n    const fullWhere = combineQueries(where, accessResult)\n\n    const sort = sanitizeSortQuery({\n      fields: collection.config.flattenedFields,\n      sort: incomingSort,\n    })\n\n    let docs\n\n    if (collectionConfig.versions?.drafts && shouldSaveDraft) {\n      const versionsWhere = appendVersionToQueryKey(fullWhere)\n\n      await validateQueryPaths({\n        collectionConfig: collection.config,\n        overrideAccess,\n        req,\n        versionFields: buildVersionCollectionFields(payload.config, collection.config, true),\n        where: appendVersionToQueryKey(where),\n      })\n\n      const query = await payload.db.queryDrafts<DataFromCollectionSlug<TSlug>>({\n        collection: collectionConfig.slug,\n        limit,\n        locale,\n        pagination: false,\n        req,\n        sort: getQueryDraftsSort({ collectionConfig, sort }),\n        where: versionsWhere,\n      })\n\n      docs = query.docs\n    } else {\n      const query = await payload.db.find({\n        collection: collectionConfig.slug,\n        limit,\n        locale,\n        pagination: false,\n        req,\n        sort,\n        where: fullWhere,\n      })\n\n      docs = query.docs\n    }\n\n    // /////////////////////////////////////\n    // Generate data for all files and sizes\n    // /////////////////////////////////////\n\n    const { data, files: filesToUpload } = await generateFileData({\n      collection,\n      config,\n      data: bulkUpdateData,\n      operation: 'update',\n      overwriteExistingFiles,\n      req,\n      throwOnMissingFile: false,\n    })\n\n    const errors = []\n\n    const promises = docs.map(async (docWithLocales) => {\n      const { id } = docWithLocales\n\n      try {\n        const select = sanitizeSelect({\n          fields: collectionConfig.flattenedFields,\n          forceSelect: collectionConfig.forceSelect,\n          select: incomingSelect,\n        })\n\n        // ///////////////////////////////////////////////\n        // Update document, runs all document level hooks\n        // ///////////////////////////////////////////////\n        const updatedDoc = await updateDocument({\n          id,\n          accessResults: accessResult,\n          autosave: false,\n          collectionConfig,\n          config,\n          data: deepCopyObjectSimple(data),\n          depth,\n          docWithLocales,\n          draftArg,\n          fallbackLocale,\n          filesToUpload,\n          locale,\n          overrideAccess,\n          overrideLock,\n          payload,\n          populate,\n          publishSpecificLocale,\n          req,\n          select,\n          showHiddenFields,\n        })\n\n        return updatedDoc\n      } catch (error) {\n        errors.push({\n          id,\n          message: error.message,\n        })\n      }\n      return null\n    })\n\n    await unlinkTempFiles({\n      collectionConfig,\n      config,\n      req,\n    })\n\n    const awaitedDocs = await Promise.all(promises)\n\n    let result = {\n      docs: awaitedDocs.filter(Boolean),\n      errors,\n    }\n\n    // /////////////////////////////////////\n    // afterOperation - Collection\n    // /////////////////////////////////////\n\n    result = await buildAfterOperation({\n      args,\n      collection: collectionConfig,\n      operation: 'update',\n      result,\n    })\n\n    if (shouldCommit) {\n      await commitTransaction(req)\n    }\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(args.req)\n    throw error\n  }\n}\n"],"names":["status","httpStatus","executeAccess","combineQueries","validateQueryPaths","APIError","deepCopyObjectSimple","generateFileData","unlinkTempFiles","commitTransaction","initTransaction","killTransaction","sanitizeSelect","buildVersionCollectionFields","appendVersionToQueryKey","getQueryDraftsSort","sanitizeSortQuery","updateDocument","buildAfterOperation","updateOperation","incomingArgs","args","shouldCommit","disableTransaction","req","collection","config","hooks","beforeOperation","length","hook","context","operation","collectionConfig","depth","draft","draftArg","limit","overrideAccess","overrideLock","overwriteExistingFiles","populate","publishSpecificLocale","fallbackLocale","locale","payload","select","incomingSelect","showHiddenFields","sort","incomingSort","where","BAD_REQUEST","data","bulkUpdateData","shouldSaveDraft","Boolean","versions","drafts","accessResult","access","update","fullWhere","fields","flattenedFields","docs","versionsWhere","versionFields","query","db","queryDrafts","slug","pagination","find","files","filesToUpload","throwOnMissingFile","errors","promises","map","docWithLocales","id","forceSelect","updatedDoc","accessResults","autosave","error","push","message","awaitedDocs","Promise","all","result","filter"],"mappings":"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"}
{"version":3,"sources":["../../../src/collections/operations/deleteByID.ts"],"sourcesContent":["// @ts-strict-ignore\nimport type { CollectionSlug } from '../../index.js'\nimport type {\n  PayloadRequest,\n  PopulateType,\n  SelectType,\n  TransformCollectionWithSelect,\n} from '../../types/index.js'\nimport type { Collection, DataFromCollectionSlug } from '../config/types.js'\n\nimport executeAccess from '../../auth/executeAccess.js'\nimport { hasWhereAccessResult } from '../../auth/types.js'\nimport { combineQueries } from '../../database/combineQueries.js'\nimport { Forbidden, NotFound } from '../../errors/index.js'\nimport { afterRead } from '../../fields/hooks/afterRead/index.js'\nimport { deleteUserPreferences } from '../../preferences/deleteUserPreferences.js'\nimport { deleteAssociatedFiles } from '../../uploads/deleteAssociatedFiles.js'\nimport { checkDocumentLockStatus } from '../../utilities/checkDocumentLockStatus.js'\nimport { commitTransaction } from '../../utilities/commitTransaction.js'\nimport { initTransaction } from '../../utilities/initTransaction.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport { sanitizeSelect } from '../../utilities/sanitizeSelect.js'\nimport { deleteCollectionVersions } from '../../versions/deleteCollectionVersions.js'\nimport { deleteScheduledPublishJobs } from '../../versions/deleteScheduledPublishJobs.js'\nimport { buildAfterOperation } from './utils.js'\n\nexport type Arguments = {\n  collection: Collection\n  depth?: number\n  disableTransaction?: boolean\n  id: number | string\n  overrideAccess?: boolean\n  overrideLock?: boolean\n  populate?: PopulateType\n  req: PayloadRequest\n  select?: SelectType\n  showHiddenFields?: boolean\n}\n\nexport const deleteByIDOperation = async <TSlug extends CollectionSlug, TSelect extends SelectType>(\n  incomingArgs: Arguments,\n): Promise<TransformCollectionWithSelect<TSlug, TSelect>> => {\n  let args = incomingArgs\n\n  try {\n    const shouldCommit = !args.disableTransaction && (await initTransaction(args.req))\n\n    // /////////////////////////////////////\n    // beforeOperation - Collection\n    // /////////////////////////////////////\n\n    if (args.collection.config.hooks?.beforeOperation?.length) {\n      for (const hook of args.collection.config.hooks.beforeOperation) {\n        args =\n          (await hook({\n            args,\n            collection: args.collection.config,\n            context: args.req.context,\n            operation: 'delete',\n            req: args.req,\n          })) || args\n      }\n    }\n\n    const {\n      id,\n      collection: { config: collectionConfig },\n      depth,\n      overrideAccess,\n      overrideLock,\n      populate,\n      req: {\n        fallbackLocale,\n        locale,\n        payload: { config },\n        payload,\n      },\n      req,\n      select: incomingSelect,\n      showHiddenFields,\n    } = args\n\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    const accessResults = !overrideAccess\n      ? await executeAccess({ id, req }, collectionConfig.access.delete)\n      : true\n    const hasWhereAccess = hasWhereAccessResult(accessResults)\n\n    // /////////////////////////////////////\n    // beforeDelete - Collection\n    // /////////////////////////////////////\n\n    if (collectionConfig.hooks?.beforeDelete?.length) {\n      for (const hook of collectionConfig.hooks.beforeDelete) {\n        await hook({\n          id,\n          collection: collectionConfig,\n          context: req.context,\n          req,\n        })\n      }\n    }\n\n    // /////////////////////////////////////\n    // Retrieve document\n    // /////////////////////////////////////\n\n    const docToDelete = await req.payload.db.findOne({\n      collection: collectionConfig.slug,\n      locale: req.locale,\n      req,\n      where: combineQueries({ id: { equals: id } }, accessResults),\n    })\n\n    if (!docToDelete && !hasWhereAccess) {\n      throw new NotFound(req.t)\n    }\n    if (!docToDelete && hasWhereAccess) {\n      throw new Forbidden(req.t)\n    }\n\n    // /////////////////////////////////////\n    // Handle potentially locked documents\n    // /////////////////////////////////////\n\n    await checkDocumentLockStatus({\n      id,\n      collectionSlug: collectionConfig.slug,\n      lockErrorMessage: `Document with ID ${id} is currently locked and cannot be deleted.`,\n      overrideLock,\n      req,\n    })\n\n    await deleteAssociatedFiles({\n      collectionConfig,\n      config,\n      doc: docToDelete,\n      overrideDelete: true,\n      req,\n    })\n\n    // /////////////////////////////////////\n    // Delete versions\n    // /////////////////////////////////////\n\n    if (collectionConfig.versions) {\n      await deleteCollectionVersions({\n        id,\n        slug: collectionConfig.slug,\n        payload,\n        req,\n      })\n    }\n\n    // /////////////////////////////////////\n    // Delete scheduled posts\n    // /////////////////////////////////////\n    if (collectionConfig.versions?.drafts && collectionConfig.versions.drafts.schedulePublish) {\n      await deleteScheduledPublishJobs({\n        id,\n        slug: collectionConfig.slug,\n        payload,\n        req,\n      })\n    }\n\n    const select = sanitizeSelect({\n      fields: collectionConfig.flattenedFields,\n      forceSelect: collectionConfig.forceSelect,\n      select: incomingSelect,\n    })\n\n    // /////////////////////////////////////\n    // Delete document\n    // /////////////////////////////////////\n\n    let result: DataFromCollectionSlug<TSlug> = await req.payload.db.deleteOne({\n      collection: collectionConfig.slug,\n      req,\n      select,\n      where: { id: { equals: id } },\n    })\n\n    // /////////////////////////////////////\n    // Delete Preferences\n    // /////////////////////////////////////\n\n    await deleteUserPreferences({\n      collectionConfig,\n      ids: [id],\n      payload,\n      req,\n    })\n\n    // /////////////////////////////////////\n    // afterRead - Fields\n    // /////////////////////////////////////\n\n    result = await afterRead({\n      collection: collectionConfig,\n      context: req.context,\n      depth,\n      doc: result,\n      draft: undefined,\n      fallbackLocale,\n      global: null,\n      locale,\n      overrideAccess,\n      populate,\n      req,\n      select,\n      showHiddenFields,\n    })\n\n    // /////////////////////////////////////\n    // afterRead - Collection\n    // /////////////////////////////////////\n\n    if (collectionConfig.hooks?.afterRead?.length) {\n      for (const hook of collectionConfig.hooks.afterRead) {\n        result =\n          (await hook({\n            collection: collectionConfig,\n            context: req.context,\n            doc: result,\n            req,\n          })) || result\n      }\n    }\n\n    // /////////////////////////////////////\n    // afterDelete - Collection\n    // /////////////////////////////////////\n\n    if (collectionConfig.hooks?.afterDelete?.length) {\n      for (const hook of collectionConfig.hooks.afterDelete) {\n        result =\n          (await hook({\n            id,\n            collection: collectionConfig,\n            context: req.context,\n            doc: result,\n            req,\n          })) || result\n      }\n    }\n\n    // /////////////////////////////////////\n    // afterOperation - Collection\n    // /////////////////////////////////////\n\n    result = await buildAfterOperation({\n      args,\n      collection: collectionConfig,\n      operation: 'deleteByID',\n      result,\n    })\n\n    // /////////////////////////////////////\n    // 8. Return results\n    // /////////////////////////////////////\n\n    if (shouldCommit) {\n      await commitTransaction(req)\n    }\n\n    return result as TransformCollectionWithSelect<TSlug, TSelect>\n  } catch (error: unknown) {\n    await killTransaction(args.req)\n    throw error\n  }\n}\n"],"names":["executeAccess","hasWhereAccessResult","combineQueries","Forbidden","NotFound","afterRead","deleteUserPreferences","deleteAssociatedFiles","checkDocumentLockStatus","commitTransaction","initTransaction","killTransaction","sanitizeSelect","deleteCollectionVersions","deleteScheduledPublishJobs","buildAfterOperation","deleteByIDOperation","incomingArgs","args","shouldCommit","disableTransaction","req","collection","config","hooks","beforeOperation","length","hook","context","operation","id","collectionConfig","depth","overrideAccess","overrideLock","populate","fallbackLocale","locale","payload","select","incomingSelect","showHiddenFields","accessResults","access","delete","hasWhereAccess","beforeDelete","docToDelete","db","findOne","slug","where","equals","t","collectionSlug","lockErrorMessage","doc","overrideDelete","versions","drafts","schedulePublish","fields","flattenedFields","forceSelect","result","deleteOne","ids","draft","undefined","global","afterDelete","error"],"mappings":"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"}
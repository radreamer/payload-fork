{"version":3,"sources":["../../../src/collections/operations/countVersions.ts"],"sourcesContent":["// @ts-strict-ignore\nimport type { AccessResult } from '../../config/types.js'\nimport type { PayloadRequest, Where } from '../../types/index.js'\nimport type { Collection } from '../config/types.js'\n\nimport executeAccess from '../../auth/executeAccess.js'\nimport { combineQueries } from '../../database/combineQueries.js'\nimport { validateQueryPaths } from '../../database/queryValidation/validateQueryPaths.js'\nimport { buildVersionCollectionFields, type CollectionSlug } from '../../index.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport { buildAfterOperation } from './utils.js'\n\nexport type Arguments = {\n  collection: Collection\n  disableErrors?: boolean\n  overrideAccess?: boolean\n  req?: PayloadRequest\n  where?: Where\n}\n\nexport const countVersionsOperation = async <TSlug extends CollectionSlug>(\n  incomingArgs: Arguments,\n): Promise<{ totalDocs: number }> => {\n  let args = incomingArgs\n\n  try {\n    // /////////////////////////////////////\n    // beforeOperation - Collection\n    // /////////////////////////////////////\n\n    if (args.collection.config.hooks.beforeOperation?.length) {\n      for (const hook of args.collection.config.hooks.beforeOperation) {\n        args =\n          (await hook({\n            args,\n            collection: args.collection.config,\n            context: args.req.context,\n            operation: 'countVersions',\n            req: args.req,\n          })) || args\n      }\n    }\n\n    const {\n      collection: { config: collectionConfig },\n      disableErrors,\n      overrideAccess,\n      req: { payload },\n      req,\n      where,\n    } = args\n\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    let accessResult: AccessResult\n\n    if (!overrideAccess) {\n      accessResult = await executeAccess(\n        { disableErrors, req },\n        collectionConfig.access.readVersions,\n      )\n\n      // If errors are disabled, and access returns false, return empty results\n      if (accessResult === false) {\n        return {\n          totalDocs: 0,\n        }\n      }\n    }\n\n    let result: { totalDocs: number }\n\n    const fullWhere = combineQueries(where, accessResult)\n\n    const versionFields = buildVersionCollectionFields(payload.config, collectionConfig, true)\n\n    await validateQueryPaths({\n      collectionConfig,\n      overrideAccess,\n      req,\n      versionFields,\n      where,\n    })\n\n    result = await payload.db.countVersions({\n      collection: collectionConfig.slug,\n      req,\n      where: fullWhere,\n    })\n\n    // /////////////////////////////////////\n    // afterOperation - Collection\n    // /////////////////////////////////////\n\n    result = await buildAfterOperation({\n      args,\n      collection: collectionConfig,\n      operation: 'countVersions',\n      result,\n    })\n\n    // /////////////////////////////////////\n    // Return results\n    // /////////////////////////////////////\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(args.req)\n    throw error\n  }\n}\n"],"names":["executeAccess","combineQueries","validateQueryPaths","buildVersionCollectionFields","killTransaction","buildAfterOperation","countVersionsOperation","incomingArgs","args","collection","config","hooks","beforeOperation","length","hook","context","req","operation","collectionConfig","disableErrors","overrideAccess","payload","where","accessResult","access","readVersions","totalDocs","result","fullWhere","versionFields","db","countVersions","slug","error"],"mappings":"AAAA,oBAAoB;AAKpB,OAAOA,mBAAmB,8BAA6B;AACvD,SAASC,cAAc,QAAQ,mCAAkC;AACjE,SAASC,kBAAkB,QAAQ,uDAAsD;AACzF,SAASC,4BAA4B,QAA6B,iBAAgB;AAClF,SAASC,eAAe,QAAQ,qCAAoC;AACpE,SAASC,mBAAmB,QAAQ,aAAY;AAUhD,OAAO,MAAMC,yBAAyB,OACpCC;IAEA,IAAIC,OAAOD;IAEX,IAAI;QACF,wCAAwC;QACxC,+BAA+B;QAC/B,wCAAwC;QAExC,IAAIC,KAAKC,UAAU,CAACC,MAAM,CAACC,KAAK,CAACC,eAAe,EAAEC,QAAQ;YACxD,KAAK,MAAMC,QAAQN,KAAKC,UAAU,CAACC,MAAM,CAACC,KAAK,CAACC,eAAe,CAAE;gBAC/DJ,OACE,AAAC,MAAMM,KAAK;oBACVN;oBACAC,YAAYD,KAAKC,UAAU,CAACC,MAAM;oBAClCK,SAASP,KAAKQ,GAAG,CAACD,OAAO;oBACzBE,WAAW;oBACXD,KAAKR,KAAKQ,GAAG;gBACf,MAAOR;YACX;QACF;QAEA,MAAM,EACJC,YAAY,EAAEC,QAAQQ,gBAAgB,EAAE,EACxCC,aAAa,EACbC,cAAc,EACdJ,KAAK,EAAEK,OAAO,EAAE,EAChBL,GAAG,EACHM,KAAK,EACN,GAAGd;QAEJ,wCAAwC;QACxC,SAAS;QACT,wCAAwC;QAExC,IAAIe;QAEJ,IAAI,CAACH,gBAAgB;YACnBG,eAAe,MAAMvB,cACnB;gBAAEmB;gBAAeH;YAAI,GACrBE,iBAAiBM,MAAM,CAACC,YAAY;YAGtC,yEAAyE;YACzE,IAAIF,iBAAiB,OAAO;gBAC1B,OAAO;oBACLG,WAAW;gBACb;YACF;QACF;QAEA,IAAIC;QAEJ,MAAMC,YAAY3B,eAAeqB,OAAOC;QAExC,MAAMM,gBAAgB1B,6BAA6BkB,QAAQX,MAAM,EAAEQ,kBAAkB;QAErF,MAAMhB,mBAAmB;YACvBgB;YACAE;YACAJ;YACAa;YACAP;QACF;QAEAK,SAAS,MAAMN,QAAQS,EAAE,CAACC,aAAa,CAAC;YACtCtB,YAAYS,iBAAiBc,IAAI;YACjChB;YACAM,OAAOM;QACT;QAEA,wCAAwC;QACxC,8BAA8B;QAC9B,wCAAwC;QAExCD,SAAS,MAAMtB,oBAAoB;YACjCG;YACAC,YAAYS;YACZD,WAAW;YACXU;QACF;QAEA,wCAAwC;QACxC,iBAAiB;QACjB,wCAAwC;QAExC,OAAOA;IACT,EAAE,OAAOM,OAAgB;QACvB,MAAM7B,gBAAgBI,KAAKQ,GAAG;QAC9B,MAAMiB;IACR;AACF,EAAC"}
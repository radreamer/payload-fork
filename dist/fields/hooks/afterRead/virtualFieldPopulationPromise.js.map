{"version":3,"sources":["../../../../src/fields/hooks/afterRead/virtualFieldPopulationPromise.ts"],"sourcesContent":["import type { PayloadRequest } from '../../../types/index.js'\nimport type { FlattenedField } from '../../config/types.js'\n\nimport { createDataloaderCacheKey } from '../../../collections/dataloader.js'\n\nexport const virtualFieldPopulationPromise = async ({\n  name,\n  draft,\n  fallbackLocale,\n  fields,\n  locale,\n  overrideAccess,\n  ref,\n  req,\n  segments,\n  showHiddenFields,\n  siblingDoc,\n}: {\n  draft: boolean\n  fallbackLocale: string\n  fields: FlattenedField[]\n  locale: string\n  name: string\n  overrideAccess: boolean\n  ref: any\n  req: PayloadRequest\n  segments: string[]\n  showHiddenFields: boolean\n  siblingDoc: Record<string, unknown>\n}): Promise<void> => {\n  const currentSegment = segments.shift()\n\n  if (!currentSegment) {\n    return\n  }\n\n  const currentValue = ref[currentSegment]\n\n  if (typeof currentValue === 'undefined') {\n    return\n  }\n\n  // Final step\n  if (segments.length === 0) {\n    siblingDoc[name] = currentValue\n    return\n  }\n\n  const currentField = fields.find((each) => each.name === currentSegment)\n\n  if (!currentField) {\n    return\n  }\n\n  if (currentField.type === 'group' || currentField.type === 'tab') {\n    if (!currentValue || typeof currentValue !== 'object') {\n      return\n    }\n\n    return virtualFieldPopulationPromise({\n      name,\n      draft,\n      fallbackLocale,\n      fields: currentField.flattenedFields,\n      locale,\n      overrideAccess,\n      ref: currentValue,\n      req,\n      segments,\n      showHiddenFields,\n      siblingDoc,\n    })\n  }\n\n  if (\n    (currentField.type === 'relationship' || currentField.type === 'upload') &&\n    typeof currentField.relationTo === 'string' &&\n    !currentField.hasMany\n  ) {\n    let docID: number | string\n\n    if (typeof currentValue === 'object' && currentValue) {\n      docID = currentValue.id\n    } else {\n      docID = currentValue\n    }\n\n    if (segments[0] === 'id' && segments.length === 0) {\n      siblingDoc[name] = docID\n      return\n    }\n\n    if (typeof docID !== 'string' && typeof docID !== 'number') {\n      return\n    }\n\n    const select = {}\n    let currentSelectRef: any = select\n    const currentFields = req.payload.collections[currentField.relationTo].config.flattenedFields\n\n    for (let i = 0; i < segments.length; i++) {\n      const field = currentFields.find((each) => each.name === segments[i])\n\n      const shouldBreak =\n        i === segments.length - 1 || field?.type === 'relationship' || field?.type === 'upload'\n\n      currentSelectRef[segments[i]] = shouldBreak ? true : {}\n      currentSelectRef = currentSelectRef[segments[i]]\n\n      if (shouldBreak) {\n        break\n      }\n    }\n\n    const populatedDoc = await req.payloadDataLoader.load(\n      createDataloaderCacheKey({\n        collectionSlug: currentField.relationTo,\n        currentDepth: 0,\n        depth: 0,\n        docID,\n        draft,\n        fallbackLocale,\n        locale,\n        overrideAccess,\n        select,\n        showHiddenFields,\n        transactionID: req.transactionID as number,\n      }),\n    )\n\n    if (!populatedDoc) {\n      return\n    }\n\n    return virtualFieldPopulationPromise({\n      name,\n      draft,\n      fallbackLocale,\n      fields: req.payload.collections[currentField.relationTo].config.flattenedFields,\n      locale,\n      overrideAccess,\n      ref: populatedDoc,\n      req,\n      segments,\n      showHiddenFields,\n      siblingDoc,\n    })\n  }\n}\n"],"names":["createDataloaderCacheKey","virtualFieldPopulationPromise","name","draft","fallbackLocale","fields","locale","overrideAccess","ref","req","segments","showHiddenFields","siblingDoc","currentSegment","shift","currentValue","length","currentField","find","each","type","flattenedFields","relationTo","hasMany","docID","id","select","currentSelectRef","currentFields","payload","collections","config","i","field","shouldBreak","populatedDoc","payloadDataLoader","load","collectionSlug","currentDepth","depth","transactionID"],"mappings":"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"}
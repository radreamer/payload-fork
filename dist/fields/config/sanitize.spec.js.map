{"version":3,"sources":["../../../src/fields/config/sanitize.spec.ts"],"sourcesContent":["import type { Config } from '../../config/types.js'\nimport type {\n  ArrayField,\n  Block,\n  BlocksField,\n  CheckboxField,\n  Field,\n  NumberField,\n  TextField,\n} from './types.js'\n\nimport { InvalidFieldName, InvalidFieldRelationship, MissingFieldType } from '../../errors/index.js'\nimport { sanitizeFields } from './sanitize.js'\nimport { CollectionConfig } from '../../index.js'\n\ndescribe('sanitizeFields', () => {\n  const config = {} as Config\n  const collectionConfig = {} as CollectionConfig\n\n  it('should throw on missing type field', async () => {\n    const fields: Field[] = [\n      // @ts-expect-error\n      {\n        name: 'Some Collection',\n        label: 'some-collection',\n      },\n    ]\n\n    await expect(async () => {\n      await sanitizeFields({\n        config,\n        collectionConfig,\n        fields,\n        validRelationships: [],\n      })\n    }).rejects.toThrow(MissingFieldType)\n  })\n\n  it('should throw on invalid field name', async () => {\n    const fields: Field[] = [\n      {\n        name: 'some.collection',\n        type: 'text',\n        label: 'some.collection',\n      },\n    ]\n\n    await expect(async () => {\n      await sanitizeFields({\n        config,\n        collectionConfig,\n        fields,\n        validRelationships: [],\n      })\n    }).rejects.toThrow(InvalidFieldName)\n  })\n\n  describe('auto-labeling', () => {\n    it('should populate label if missing', async () => {\n      const fields: Field[] = [\n        {\n          name: 'someField',\n          type: 'text',\n        },\n      ]\n\n      const sanitizedField = (\n        await sanitizeFields({\n          config,\n          collectionConfig,\n          fields,\n          validRelationships: [],\n        })\n      )[0] as TextField\n\n      expect(sanitizedField.name).toStrictEqual('someField')\n      expect(sanitizedField.label).toStrictEqual('Some Field')\n      expect(sanitizedField.type).toStrictEqual('text')\n    })\n\n    it('should allow auto-label override', async () => {\n      const fields: Field[] = [\n        {\n          name: 'someField',\n          type: 'text',\n          label: 'Do not label',\n        },\n      ]\n\n      const sanitizedField = (\n        await sanitizeFields({\n          config,\n          collectionConfig,\n          fields,\n          validRelationships: [],\n        })\n      )[0] as TextField\n\n      expect(sanitizedField.name).toStrictEqual('someField')\n      expect(sanitizedField.label).toStrictEqual('Do not label')\n      expect(sanitizedField.type).toStrictEqual('text')\n    })\n\n    describe('opt-out', () => {\n      it('should allow label opt-out', async () => {\n        const fields: Field[] = [\n          {\n            name: 'someField',\n            type: 'text',\n            label: false,\n          },\n        ]\n\n        const sanitizedField = (\n          await sanitizeFields({\n            config,\n            collectionConfig,\n            fields,\n            validRelationships: [],\n          })\n        )[0] as TextField\n\n        expect(sanitizedField.name).toStrictEqual('someField')\n        expect(sanitizedField.label).toStrictEqual(false)\n        expect(sanitizedField.type).toStrictEqual('text')\n      })\n\n      it('should allow label opt-out for arrays', async () => {\n        const arrayField: ArrayField = {\n          name: 'items',\n          type: 'array',\n          fields: [\n            {\n              name: 'itemName',\n              type: 'text',\n            },\n          ],\n          label: false,\n        }\n\n        const sanitizedField = (\n          await sanitizeFields({\n            config,\n            collectionConfig,\n            fields: [arrayField],\n            validRelationships: [],\n          })\n        )[0] as ArrayField\n\n        expect(sanitizedField.name).toStrictEqual('items')\n        expect(sanitizedField.label).toStrictEqual(false)\n        expect(sanitizedField.type).toStrictEqual('array')\n        expect(sanitizedField.labels).toBeUndefined()\n      })\n\n      it('should allow label opt-out for blocks', async () => {\n        const fields: Field[] = [\n          {\n            name: 'noLabelBlock',\n            type: 'blocks',\n            blocks: [\n              {\n                slug: 'number',\n                fields: [\n                  {\n                    name: 'testNumber',\n                    type: 'number',\n                  },\n                ],\n              },\n            ],\n            label: false,\n          },\n        ]\n\n        const sanitizedField = (\n          await sanitizeFields({\n            config,\n            collectionConfig,\n            fields,\n            validRelationships: [],\n          })\n        )[0] as BlocksField\n\n        expect(sanitizedField.name).toStrictEqual('noLabelBlock')\n        expect(sanitizedField.label).toStrictEqual(false)\n        expect(sanitizedField.type).toStrictEqual('blocks')\n        expect(sanitizedField.labels).toBeUndefined()\n      })\n    })\n\n    it('should label arrays with plural and singular', async () => {\n      const fields: Field[] = [\n        {\n          name: 'items',\n          type: 'array',\n          fields: [\n            {\n              name: 'itemName',\n              type: 'text',\n            },\n          ],\n        },\n      ]\n\n      const sanitizedField = (\n        await sanitizeFields({\n          config,\n          collectionConfig,\n          fields,\n          validRelationships: [],\n        })\n      )[0] as ArrayField\n\n      expect(sanitizedField.name).toStrictEqual('items')\n      expect(sanitizedField.label).toStrictEqual('Items')\n      expect(sanitizedField.type).toStrictEqual('array')\n      expect(sanitizedField.labels).toMatchObject({ plural: 'Items', singular: 'Item' })\n    })\n\n    it('should label blocks with plural and singular', async () => {\n      const fields: Field[] = [\n        {\n          name: 'specialBlock',\n          type: 'blocks',\n          blocks: [\n            {\n              slug: 'number',\n              fields: [{ name: 'testNumber', type: 'number' }],\n            },\n          ],\n        },\n      ]\n\n      const sanitizedField = (\n        await sanitizeFields({\n          config,\n          collectionConfig,\n          fields,\n          validRelationships: [],\n        })\n      )[0] as BlocksField\n\n      expect(sanitizedField.name).toStrictEqual('specialBlock')\n      expect(sanitizedField.label).toStrictEqual('Special Block')\n      expect(sanitizedField.type).toStrictEqual('blocks')\n      expect(sanitizedField.labels).toMatchObject({\n        plural: 'Special Blocks',\n        singular: 'Special Block',\n      })\n\n      expect((sanitizedField.blocks[0].fields[0] as NumberField).label).toStrictEqual('Test Number')\n    })\n  })\n\n  describe('relationships', () => {\n    it('should not throw on valid relationship', async () => {\n      const validRelationships = ['some-collection']\n      const fields: Field[] = [\n        {\n          name: 'My Relationship',\n          type: 'relationship',\n          label: 'my-relationship',\n          relationTo: 'some-collection',\n        },\n      ]\n\n      await expect(async () => {\n        await sanitizeFields({ config, collectionConfig, fields, validRelationships })\n      }).not.toThrow()\n    })\n\n    it('should not throw on valid relationship - multiple', async () => {\n      const validRelationships = ['some-collection', 'another-collection']\n      const fields: Field[] = [\n        {\n          name: 'My Relationship',\n          type: 'relationship',\n          label: 'my-relationship',\n          relationTo: ['some-collection', 'another-collection'],\n        },\n      ]\n\n      await expect(async () => {\n        await sanitizeFields({ config, collectionConfig, fields, validRelationships })\n      }).not.toThrow()\n    })\n\n    it('should not throw on valid relationship inside blocks', async () => {\n      const validRelationships = ['some-collection']\n      const relationshipBlock: Block = {\n        slug: 'relationshipBlock',\n        fields: [\n          {\n            name: 'My Relationship',\n            type: 'relationship',\n            label: 'my-relationship',\n            relationTo: 'some-collection',\n          },\n        ],\n      }\n\n      const fields: Field[] = [\n        {\n          name: 'layout',\n          type: 'blocks',\n          blocks: [relationshipBlock],\n          label: 'Layout Blocks',\n        },\n      ]\n\n      await expect(async () => {\n        await sanitizeFields({ config, collectionConfig, fields, validRelationships })\n      }).not.toThrow()\n    })\n\n    it('should throw on invalid relationship', async () => {\n      const validRelationships = ['some-collection']\n      const fields: Field[] = [\n        {\n          name: 'My Relationship',\n          type: 'relationship',\n          label: 'my-relationship',\n          relationTo: 'not-valid',\n        },\n      ]\n\n      await expect(async () => {\n        await sanitizeFields({ config, collectionConfig, fields, validRelationships })\n      }).rejects.toThrow(InvalidFieldRelationship)\n    })\n\n    it('should throw on invalid relationship - multiple', async () => {\n      const validRelationships = ['some-collection', 'another-collection']\n      const fields: Field[] = [\n        {\n          name: 'My Relationship',\n          type: 'relationship',\n          label: 'my-relationship',\n          relationTo: ['some-collection', 'not-valid'],\n        },\n      ]\n\n      await expect(async () => {\n        await sanitizeFields({ config, collectionConfig, fields, validRelationships })\n      }).rejects.toThrow(InvalidFieldRelationship)\n    })\n\n    it('should throw on invalid relationship inside blocks', async () => {\n      const validRelationships = ['some-collection']\n      const relationshipBlock: Block = {\n        slug: 'relationshipBlock',\n        fields: [\n          {\n            name: 'My Relationship',\n            type: 'relationship',\n            label: 'my-relationship',\n            relationTo: 'not-valid',\n          },\n        ],\n      }\n\n      const fields: Field[] = [\n        {\n          name: 'layout',\n          type: 'blocks',\n          blocks: [relationshipBlock],\n          label: 'Layout Blocks',\n        },\n      ]\n\n      await expect(async () => {\n        await sanitizeFields({ config, collectionConfig, fields, validRelationships })\n      }).rejects.toThrow(InvalidFieldRelationship)\n    })\n\n    it('should defaultValue of checkbox to false if required and undefined', async () => {\n      const fields: Field[] = [\n        {\n          name: 'My Checkbox',\n          type: 'checkbox',\n          required: true,\n        },\n      ]\n\n      const sanitizedField = (\n        await sanitizeFields({\n          config,\n          collectionConfig,\n          fields,\n          validRelationships: [],\n        })\n      )[0] as CheckboxField\n\n      expect(sanitizedField.defaultValue).toStrictEqual(false)\n    })\n\n    it('should return empty field array if no fields', async () => {\n      const sanitizedFields = await sanitizeFields({\n        config,\n        collectionConfig,\n        fields: [],\n        validRelationships: [],\n      })\n\n      expect(sanitizedFields).toStrictEqual([])\n    })\n  })\n  describe('blocks', () => {\n    it('should maintain admin.blockName true after sanitization', async () => {\n      const fields: Field[] = [\n        {\n          name: 'noLabelBlock',\n          type: 'blocks',\n          blocks: [\n            {\n              slug: 'number',\n              admin: {\n                disableBlockName: true,\n              },\n              fields: [\n                {\n                  name: 'testNumber',\n                  type: 'number',\n                },\n              ],\n            },\n          ],\n          label: false,\n        },\n      ]\n\n      const sanitizedField = (\n        await sanitizeFields({\n          config,\n          collectionConfig,\n          fields,\n          validRelationships: [],\n        })\n      )[0] as BlocksField\n\n      const sanitizedBlock = sanitizedField.blocks[0]\n\n      expect(sanitizedBlock.admin?.disableBlockName).toStrictEqual(true)\n    })\n    it('should default admin.disableBlockName to true after sanitization', async () => {\n      const fields: Field[] = [\n        {\n          name: 'noLabelBlock',\n          type: 'blocks',\n          blocks: [\n            {\n              slug: 'number',\n              fields: [\n                {\n                  name: 'testNumber',\n                  type: 'number',\n                },\n              ],\n            },\n          ],\n          label: false,\n        },\n      ]\n\n      const sanitizedField = (\n        await sanitizeFields({\n          config,\n          collectionConfig,\n          fields,\n          validRelationships: [],\n        })\n      )[0] as BlocksField\n\n      const sanitizedBlock = sanitizedField.blocks[0]\n\n      expect(sanitizedBlock.admin?.disableBlockName).toStrictEqual(undefined)\n    })\n  })\n})\n"],"names":["InvalidFieldName","InvalidFieldRelationship","MissingFieldType","sanitizeFields","describe","config","collectionConfig","it","fields","name","label","expect","validRelationships","rejects","toThrow","type","sanitizedField","toStrictEqual","arrayField","labels","toBeUndefined","blocks","slug","toMatchObject","plural","singular","relationTo","not","relationshipBlock","required","defaultValue","sanitizedFields","admin","disableBlockName","sanitizedBlock","undefined"],"mappings":"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"}
{"version":3,"sources":["../../src/queues/restEndpointRun.ts"],"sourcesContent":["import type { Endpoint, SanitizedConfig } from '../config/types.js'\n\nimport { runJobs, type RunJobsArgs } from './operations/runJobs/index.js'\n\nconst configHasJobs = (config: SanitizedConfig): boolean => {\n  if (!config.jobs) {\n    return false\n  }\n\n  if (config.jobs.tasks?.length > 0) {\n    return true\n  }\n  if (config.jobs.workflows?.length > 0) {\n    return true\n  }\n\n  return false\n}\n\nexport const runJobsEndpoint: Endpoint = {\n  handler: async (req) => {\n    if (!configHasJobs(req.payload.config)) {\n      return Response.json(\n        {\n          message: 'No jobs to run.',\n        },\n        { status: 200 },\n      )\n    }\n\n    const hasAccess = await req.payload.config.jobs.access.run({ req })\n\n    if (!hasAccess) {\n      return Response.json(\n        {\n          message: req.i18n.t('error:unauthorized'),\n        },\n        { status: 401 },\n      )\n    }\n\n    const { limit, queue } = req.query\n\n    const runJobsArgs: RunJobsArgs = {\n      queue: 'default',\n      req,\n      // We are checking access above, so we can override it here\n      overrideAccess: true,\n    }\n\n    if (typeof queue === 'string') {\n      runJobsArgs.queue = queue\n    }\n\n    if (typeof limit !== 'undefined') {\n      runJobsArgs.limit = Number(limit)\n    }\n\n    let noJobsRemaining = false\n    let remainingJobsFromQueried = 0\n    try {\n      const result = await runJobs(runJobsArgs)\n      noJobsRemaining = !!result.noJobsRemaining\n      remainingJobsFromQueried = result.remainingJobsFromQueried\n    } catch (err) {\n      req.payload.logger.error({\n        err,\n        msg: 'There was an error running jobs:',\n        queue: runJobsArgs.queue,\n      })\n\n      return Response.json(\n        {\n          message: req.i18n.t('error:unknown'),\n          noJobsRemaining: true,\n          remainingJobsFromQueried,\n        },\n        { status: 500 },\n      )\n    }\n\n    return Response.json(\n      {\n        message: req.i18n.t('general:success'),\n        noJobsRemaining,\n        remainingJobsFromQueried,\n      },\n      { status: 200 },\n    )\n  },\n  method: 'get',\n  path: '/run',\n}\n"],"names":["runJobs","configHasJobs","config","jobs","tasks","length","workflows","runJobsEndpoint","handler","req","payload","Response","json","message","status","hasAccess","access","run","i18n","t","limit","queue","query","runJobsArgs","overrideAccess","Number","noJobsRemaining","remainingJobsFromQueried","result","err","logger","error","msg","method","path"],"mappings":"AAEA,SAASA,OAAO,QAA0B,gCAA+B;AAEzE,MAAMC,gBAAgB,CAACC;IACrB,IAAI,CAACA,OAAOC,IAAI,EAAE;QAChB,OAAO;IACT;IAEA,IAAID,OAAOC,IAAI,CAACC,KAAK,EAAEC,SAAS,GAAG;QACjC,OAAO;IACT;IACA,IAAIH,OAAOC,IAAI,CAACG,SAAS,EAAED,SAAS,GAAG;QACrC,OAAO;IACT;IAEA,OAAO;AACT;AAEA,OAAO,MAAME,kBAA4B;IACvCC,SAAS,OAAOC;QACd,IAAI,CAACR,cAAcQ,IAAIC,OAAO,CAACR,MAAM,GAAG;YACtC,OAAOS,SAASC,IAAI,CAClB;gBACEC,SAAS;YACX,GACA;gBAAEC,QAAQ;YAAI;QAElB;QAEA,MAAMC,YAAY,MAAMN,IAAIC,OAAO,CAACR,MAAM,CAACC,IAAI,CAACa,MAAM,CAACC,GAAG,CAAC;YAAER;QAAI;QAEjE,IAAI,CAACM,WAAW;YACd,OAAOJ,SAASC,IAAI,CAClB;gBACEC,SAASJ,IAAIS,IAAI,CAACC,CAAC,CAAC;YACtB,GACA;gBAAEL,QAAQ;YAAI;QAElB;QAEA,MAAM,EAAEM,KAAK,EAAEC,KAAK,EAAE,GAAGZ,IAAIa,KAAK;QAElC,MAAMC,cAA2B;YAC/BF,OAAO;YACPZ;YACA,2DAA2D;YAC3De,gBAAgB;QAClB;QAEA,IAAI,OAAOH,UAAU,UAAU;YAC7BE,YAAYF,KAAK,GAAGA;QACtB;QAEA,IAAI,OAAOD,UAAU,aAAa;YAChCG,YAAYH,KAAK,GAAGK,OAAOL;QAC7B;QAEA,IAAIM,kBAAkB;QACtB,IAAIC,2BAA2B;QAC/B,IAAI;YACF,MAAMC,SAAS,MAAM5B,QAAQuB;YAC7BG,kBAAkB,CAAC,CAACE,OAAOF,eAAe;YAC1CC,2BAA2BC,OAAOD,wBAAwB;QAC5D,EAAE,OAAOE,KAAK;YACZpB,IAAIC,OAAO,CAACoB,MAAM,CAACC,KAAK,CAAC;gBACvBF;gBACAG,KAAK;gBACLX,OAAOE,YAAYF,KAAK;YAC1B;YAEA,OAAOV,SAASC,IAAI,CAClB;gBACEC,SAASJ,IAAIS,IAAI,CAACC,CAAC,CAAC;gBACpBO,iBAAiB;gBACjBC;YACF,GACA;gBAAEb,QAAQ;YAAI;QAElB;QAEA,OAAOH,SAASC,IAAI,CAClB;YACEC,SAASJ,IAAIS,IAAI,CAACC,CAAC,CAAC;YACpBO;YACAC;QACF,GACA;YAAEb,QAAQ;QAAI;IAElB;IACAmB,QAAQ;IACRC,MAAM;AACR,EAAC"}
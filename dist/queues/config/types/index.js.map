{"version":3,"sources":["../../../../src/queues/config/types/index.ts"],"sourcesContent":["import type { CollectionConfig } from '../../../index.js'\nimport type { Payload, PayloadRequest, Sort } from '../../../types/index.js'\nimport type { RunJobsArgs } from '../../operations/runJobs/index.js'\nimport type { TaskConfig } from './taskTypes.js'\nimport type { WorkflowConfig } from './workflowTypes.js'\n\nexport type CronConfig = {\n  /**\n   * The cron schedule for the job.\n   * @default '* * * * *' (every minute).\n   *\n   * @example\n   *     ┌───────────── minute (0 - 59)\n   *     │ ┌───────────── hour (0 - 23)\n   *     │ │ ┌───────────── day of the month (1 - 31)\n   *     │ │ │ ┌───────────── month (1 - 12)\n   *     │ │ │ │ ┌───────────── day of the week (0 - 6) (Sunday to Saturday)\n   *     │ │ │ │ │\n   *     │ │ │ │ │\n   *  - '0 * * * *' every hour at minute 0\n   *  - '0 0 * * *' daily at midnight\n   *  - '0 0 * * 0' weekly at midnight on Sundays\n   *  - '0 0 1 * *' monthly at midnight on the 1st day of the month\n   *  - '0/5 * * * *' every 5 minutes\n   */\n  cron?: string\n  /**\n   * The limit for the job. This can be overridden by the user. Defaults to 10.\n   */\n  limit?: number\n  /**\n   * The queue name for the job.\n   */\n  queue?: string\n}\n\nexport type RunJobAccessArgs = {\n  req: PayloadRequest\n}\n\nexport type RunJobAccess = (args: RunJobAccessArgs) => boolean | Promise<boolean>\n\nexport type JobsConfig = {\n  /**\n   * Specify access control to determine who can interact with jobs.\n   */\n  access?: {\n    /**\n     * By default, all logged-in users can trigger jobs.\n     */\n    run?: RunJobAccess\n  }\n  /** Adds information about the parent job to the task log. This is useful for debugging and tracking the flow of tasks.\n   *\n   * In 4.0, this will default to `true`.\n   *\n   * @default false\n   */\n  addParentToTaskLog?: boolean\n  /**\n   * Queue cron jobs automatically on payload initialization.\n   * @remark this property should not be used on serverless platforms like Vercel\n   */\n  autoRun?: ((payload: Payload) => CronConfig[] | Promise<CronConfig[]>) | CronConfig[]\n  /**\n   * Determine whether or not to delete a job after it has successfully completed.\n   */\n  deleteJobOnComplete?: boolean\n  /**\n   * Specify depth for retrieving jobs from the queue.\n   * This should be as low as possible in order for job retrieval\n   * to be as efficient as possible. Setting it to anything higher than\n   * 0 will drastically affect performance, as less efficient database\n   * queries will be used.\n   *\n   * @default 0\n   */\n  depth?: number\n  /**\n   * Override any settings on the default Jobs collection. Accepts the default collection and allows you to return\n   * a new collection.\n   */\n  jobsCollectionOverrides?: (args: { defaultJobsCollection: CollectionConfig }) => CollectionConfig\n  /**\n   * Adjust the job processing order using a Payload sort string. This can be set globally or per queue.\n   *\n   * FIFO would equal `createdAt` and LIFO would equal `-createdAt`.\n   *\n   * @default all jobs for all queues will be executed in FIFO order.\n   */\n  processingOrder?:\n    | ((args: RunJobsArgs) => Promise<Sort> | Sort)\n    | {\n        default?: Sort\n        queues: {\n          [queue: string]: Sort\n        }\n      }\n    | Sort\n  /**\n   * By default, the job system uses direct database calls for optimal performance.\n   * If you added custom hooks to your jobs collection, you can set this to true to\n   * use the standard Payload API for all job operations. This is discouraged, as it will\n   * drastically affect performance.\n   *\n   * @default false\n   */\n  runHooks?: boolean\n  /**\n   * A function that will be executed before Payload picks up jobs which are configured by the `jobs.autorun` function.\n   * If this function returns true, jobs will be queried and picked up. If it returns false, jobs will not be run.\n   * @param payload\n   * @returns boolean\n   */\n  shouldAutoRun?: (payload: Payload) => boolean | Promise<boolean>\n  /**\n   * Define all possible tasks here\n   */\n  tasks?: TaskConfig<any>[]\n  /**\n   * Define all the workflows here. Workflows orchestrate the flow of multiple tasks.\n   */\n  workflows?: WorkflowConfig<any>[]\n}\n"],"names":[],"mappings":"AA0CA,WAiFC"}
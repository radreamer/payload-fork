{"version":3,"sources":["../../../../../src/queues/operations/runJobs/runJob/index.ts"],"sourcesContent":["// @ts-strict-ignore\nimport type { PayloadRequest } from '../../../../types/index.js'\nimport type {\n  BaseJob,\n  RunningJob,\n  WorkflowConfig,\n  WorkflowHandler,\n  WorkflowTypes,\n} from '../../../config/types/workflowTypes.js'\nimport type { RunTaskFunctionState } from './getRunTaskFunction.js'\nimport type { UpdateJobFunction } from './getUpdateJobFunction.js'\n\nimport { getRunTaskFunction } from './getRunTaskFunction.js'\nimport { handleWorkflowError } from './handleWorkflowError.js'\n\ntype Args = {\n  job: BaseJob\n  req: PayloadRequest\n  updateJob: UpdateJobFunction\n  workflowConfig: WorkflowConfig<WorkflowTypes>\n  workflowHandler: WorkflowHandler<WorkflowTypes>\n}\n\nexport type JobRunStatus = 'error' | 'error-reached-max-retries' | 'success'\n\nexport type RunJobResult = {\n  status: JobRunStatus\n}\n\nexport const runJob = async ({\n  job,\n  req,\n  updateJob,\n  workflowConfig,\n  workflowHandler,\n}: Args): Promise<RunJobResult> => {\n  // Object so that we can pass contents by reference, not value.\n  // We want any mutations to be reflected in here.\n  const state: RunTaskFunctionState = {\n    reachedMaxRetries: false,\n  }\n\n  // Run the job\n  try {\n    await workflowHandler({\n      inlineTask: getRunTaskFunction(state, job, workflowConfig, req, true, updateJob),\n      job: job as unknown as RunningJob<WorkflowTypes>, //TODO: Type this better\n      req,\n      tasks: getRunTaskFunction(state, job, workflowConfig, req, false, updateJob),\n    })\n  } catch (err) {\n    const { hasFinalError } = handleWorkflowError({\n      error: err,\n      job,\n      req,\n      state,\n      workflowConfig,\n    })\n\n    const errorJSON = hasFinalError\n      ? {\n          name: err.name,\n          cancelled: Boolean('cancelled' in err && err.cancelled),\n          message: err.message,\n          stack: err.stack,\n        }\n      : undefined\n    // Tasks update the job if they error - but in case there is an unhandled error (e.g. in the workflow itself, not in a task)\n    // we need to ensure the job is updated to reflect the error\n    await updateJob({\n      error: errorJSON,\n      hasError: hasFinalError, // If reached max retries => final error. If hasError is true this job will not be retried\n      log: job.log,\n      processing: false,\n      totalTried: (job.totalTried ?? 0) + 1,\n    })\n\n    return {\n      status: hasFinalError ? 'error-reached-max-retries' : 'error',\n    }\n  }\n\n  // Workflow has completed\n  await updateJob({\n    completedAt: new Date().toISOString(),\n    log: job.log,\n    processing: false,\n    totalTried: (job.totalTried ?? 0) + 1,\n  })\n\n  return {\n    status: 'success',\n  }\n}\n"],"names":["getRunTaskFunction","handleWorkflowError","runJob","job","req","updateJob","workflowConfig","workflowHandler","state","reachedMaxRetries","inlineTask","tasks","err","hasFinalError","error","errorJSON","name","cancelled","Boolean","message","stack","undefined","hasError","log","processing","totalTried","status","completedAt","Date","toISOString"],"mappings":"AAAA,oBAAoB;AAYpB,SAASA,kBAAkB,QAAQ,0BAAyB;AAC5D,SAASC,mBAAmB,QAAQ,2BAA0B;AAgB9D,OAAO,MAAMC,SAAS,OAAO,EAC3BC,GAAG,EACHC,GAAG,EACHC,SAAS,EACTC,cAAc,EACdC,eAAe,EACV;IACL,+DAA+D;IAC/D,iDAAiD;IACjD,MAAMC,QAA8B;QAClCC,mBAAmB;IACrB;IAEA,cAAc;IACd,IAAI;QACF,MAAMF,gBAAgB;YACpBG,YAAYV,mBAAmBQ,OAAOL,KAAKG,gBAAgBF,KAAK,MAAMC;YACtEF,KAAKA;YACLC;YACAO,OAAOX,mBAAmBQ,OAAOL,KAAKG,gBAAgBF,KAAK,OAAOC;QACpE;IACF,EAAE,OAAOO,KAAK;QACZ,MAAM,EAAEC,aAAa,EAAE,GAAGZ,oBAAoB;YAC5Ca,OAAOF;YACPT;YACAC;YACAI;YACAF;QACF;QAEA,MAAMS,YAAYF,gBACd;YACEG,MAAMJ,IAAII,IAAI;YACdC,WAAWC,QAAQ,eAAeN,OAAOA,IAAIK,SAAS;YACtDE,SAASP,IAAIO,OAAO;YACpBC,OAAOR,IAAIQ,KAAK;QAClB,IACAC;QACJ,4HAA4H;QAC5H,4DAA4D;QAC5D,MAAMhB,UAAU;YACdS,OAAOC;YACPO,UAAUT;YACVU,KAAKpB,IAAIoB,GAAG;YACZC,YAAY;YACZC,YAAY,AAACtB,CAAAA,IAAIsB,UAAU,IAAI,CAAA,IAAK;QACtC;QAEA,OAAO;YACLC,QAAQb,gBAAgB,8BAA8B;QACxD;IACF;IAEA,yBAAyB;IACzB,MAAMR,UAAU;QACdsB,aAAa,IAAIC,OAAOC,WAAW;QACnCN,KAAKpB,IAAIoB,GAAG;QACZC,YAAY;QACZC,YAAY,AAACtB,CAAAA,IAAIsB,UAAU,IAAI,CAAA,IAAK;IACtC;IAEA,OAAO;QACLC,QAAQ;IACV;AACF,EAAC"}
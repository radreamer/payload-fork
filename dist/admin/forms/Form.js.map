{"version":3,"sources":["../../../src/admin/forms/Form.ts"],"sourcesContent":["import { type SupportedLanguages } from '@payloadcms/translations'\n\nimport type { SanitizedDocumentPermissions } from '../../auth/types.js'\nimport type { Field, Validate } from '../../fields/config/types.js'\nimport type { TypedLocale } from '../../index.js'\nimport type { DocumentPreferences } from '../../preferences/types.js'\nimport type { PayloadRequest, SelectType, Where } from '../../types/index.js'\n\nexport type Data = {\n  [key: string]: any\n}\n\nexport type Row = {\n  blockType?: string\n  collapsed?: boolean\n  customComponents?: {\n    RowLabel?: React.ReactNode\n  }\n  id: string\n  isLoading?: boolean\n  lastRenderedPath?: string\n}\n\nexport type FilterOptionsResult = {\n  [relation: string]: boolean | Where\n}\n\nexport type FieldState = {\n  /**\n   * This is used to determine if the field was added by the server.\n   * This ensures the field is not ignored by the client when merging form state.\n   * This can happen because the current local state is treated as the source of truth.\n   * See `mergeServerFormState` for more details.\n   */\n  addedByServer?: boolean\n  customComponents?: {\n    /**\n     * This is used by UI fields, as they can have arbitrary components defined if used\n     * as a vessel to bring in custom components.\n     */\n    [key: string]: React.ReactNode | React.ReactNode[] | undefined\n    AfterInput?: React.ReactNode\n    BeforeInput?: React.ReactNode\n    Description?: React.ReactNode\n    Error?: React.ReactNode\n    Field?: React.ReactNode\n    Label?: React.ReactNode\n  }\n  disableFormData?: boolean\n  errorMessage?: string\n  errorPaths?: string[]\n  /**\n   * The fieldSchema may be part of the form state if `includeSchema: true` is passed to buildFormState.\n   * This will never be in the form state of the client.\n   */\n  fieldSchema?: Field\n  filterOptions?: FilterOptionsResult\n  initialValue?: unknown\n  /**\n   * The path of the field when its custom components were last rendered.\n   * This is used to denote if a field has been rendered, and if so,\n   * what path it was rendered under last.\n   *\n   * If this path is undefined, or, if it is different\n   * from the current path of a given field, the field's components will be re-rendered.\n   */\n  lastRenderedPath?: string\n  passesCondition?: boolean\n  rows?: Row[]\n  valid?: boolean\n  validate?: Validate\n  value?: unknown\n}\n\nexport type FieldStateWithoutComponents = Omit<FieldState, 'customComponents'>\n\nexport type FormState = {\n  [path: string]: FieldState\n}\n\nexport type FormStateWithoutComponents = {\n  [path: string]: FieldStateWithoutComponents\n}\n\nexport type BuildFormStateArgs = {\n  data?: Data\n  docPermissions: SanitizedDocumentPermissions | undefined\n  docPreferences: DocumentPreferences\n  /**\n   * In case `formState` is not the top-level, document form state, this can be passed to\n   * provide the top-level form state.\n   */\n  documentFormState?: FormState\n  fallbackLocale?: false | TypedLocale\n  formState?: FormState\n  id?: number | string\n  initialBlockData?: Data\n  initialBlockFormState?: FormState\n  /*\n    If not i18n was passed, the language can be passed to init i18n\n  */\n  language?: keyof SupportedLanguages\n  locale?: string\n  /**\n   * If true, will not render RSCs and instead return a simple string in their place.\n   * This is useful for environments that lack RSC support, such as Jest.\n   * Form state can still be built, but any server components will be omitted.\n   * @default false\n   */\n  mockRSCs?: boolean\n  operation?: 'create' | 'update'\n  /*\n    If true, will render field components within their state object\n  */\n  renderAllFields?: boolean\n  req: PayloadRequest\n  returnLockStatus?: boolean\n  schemaPath: string\n  select?: SelectType\n  skipValidation?: boolean\n  updateLastEdited?: boolean\n} & (\n  | {\n      collectionSlug: string\n      // Do not type it as never. This still makes it so that either collectionSlug or globalSlug is required, but makes it easier to provide both collectionSlug and globalSlug if it's\n      // unclear which one is actually available.\n      globalSlug?: string\n    }\n  | {\n      collectionSlug?: string\n      globalSlug: string\n    }\n)\n"],"names":[],"mappings":"AAoFA,WAgDC"}
{"version":3,"sources":["../../../src/uploads/endpoints/getFile.ts"],"sourcesContent":["import type { Stats } from 'fs'\n\n// @ts-strict-ignore\nimport { fileTypeFromFile } from 'file-type'\nimport fsPromises from 'fs/promises'\nimport { status as httpStatus } from 'http-status'\nimport path from 'path'\n\nimport type { PayloadHandler } from '../../config/types.js'\n\nimport { APIError } from '../../errors/APIError.js'\nimport { checkFileAccess } from '../../uploads/checkFileAccess.js'\nimport { streamFile } from '../../uploads/fetchAPI-stream-file/index.js'\nimport { getFileTypeFallback } from '../../uploads/getFileTypeFallback.js'\nimport { getRequestCollection } from '../../utilities/getRequestEntity.js'\nimport { headersWithCors } from '../../utilities/headersWithCors.js'\n\nexport const getFileHandler: PayloadHandler = async (req) => {\n  const collection = getRequestCollection(req)\n\n  const filename = req.routeParams.filename as string\n\n  if (!collection.config.upload) {\n    throw new APIError(\n      `This collection is not an upload collection: ${collection.config.slug}`,\n      httpStatus.BAD_REQUEST,\n    )\n  }\n\n  const accessResult = await checkFileAccess({\n    collection,\n    filename,\n    req,\n  })\n\n  if (accessResult instanceof Response) {\n    return accessResult\n  }\n\n  if (collection.config.upload.handlers?.length) {\n    let customResponse = null\n    for (const handler of collection.config.upload.handlers) {\n      customResponse = await handler(req, {\n        doc: accessResult,\n        params: {\n          collection: collection.config.slug,\n          filename,\n        },\n      })\n    }\n\n    if (customResponse instanceof Response) {\n      return customResponse\n    }\n  }\n\n  const fileDir = collection.config.upload?.staticDir || collection.config.slug\n  const filePath = path.resolve(`${fileDir}/${filename}`)\n  let stats: Stats\n\n  try {\n    stats = await fsPromises.stat(filePath)\n  } catch (err) {\n    if (err.code === 'ENOENT') {\n      req.payload.logger.error(\n        `File ${filename} for collection ${collection.config.slug} is missing on the disk. Expected path: ${filePath}`,\n      )\n\n      // Omit going to the routeError handler by returning response instead of\n      // throwing an error to cut down log noise. The response still matches what you get with APIError to not leak details to the user.\n      return Response.json(\n        {\n          errors: [\n            {\n              message: 'Something went wrong.',\n            },\n          ],\n        },\n        {\n          headers: headersWithCors({\n            headers: new Headers(),\n            req,\n          }),\n          status: 500,\n        },\n      )\n    }\n\n    throw err\n  }\n\n  const data = streamFile(filePath)\n  const fileTypeResult = (await fileTypeFromFile(filePath)) || getFileTypeFallback(filePath)\n\n  let headers = new Headers()\n  headers.set('Content-Type', fileTypeResult.mime)\n  headers.set('Content-Length', stats.size + '')\n  headers = collection.config.upload?.modifyResponseHeaders\n    ? collection.config.upload.modifyResponseHeaders({ headers })\n    : headers\n\n  return new Response(data, {\n    headers: headersWithCors({\n      headers,\n      req,\n    }),\n    status: httpStatus.OK,\n  })\n}\n"],"names":["fileTypeFromFile","fsPromises","status","httpStatus","path","APIError","checkFileAccess","streamFile","getFileTypeFallback","getRequestCollection","headersWithCors","getFileHandler","req","collection","filename","routeParams","config","upload","slug","BAD_REQUEST","accessResult","Response","handlers","length","customResponse","handler","doc","params","fileDir","staticDir","filePath","resolve","stats","stat","err","code","payload","logger","error","json","errors","message","headers","Headers","data","fileTypeResult","set","mime","size","modifyResponseHeaders","OK"],"mappings":"AAEA,oBAAoB;AACpB,SAASA,gBAAgB,QAAQ,YAAW;AAC5C,OAAOC,gBAAgB,cAAa;AACpC,SAASC,UAAUC,UAAU,QAAQ,cAAa;AAClD,OAAOC,UAAU,OAAM;AAIvB,SAASC,QAAQ,QAAQ,2BAA0B;AACnD,SAASC,eAAe,QAAQ,mCAAkC;AAClE,SAASC,UAAU,QAAQ,8CAA6C;AACxE,SAASC,mBAAmB,QAAQ,uCAAsC;AAC1E,SAASC,oBAAoB,QAAQ,sCAAqC;AAC1E,SAASC,eAAe,QAAQ,qCAAoC;AAEpE,OAAO,MAAMC,iBAAiC,OAAOC;IACnD,MAAMC,aAAaJ,qBAAqBG;IAExC,MAAME,WAAWF,IAAIG,WAAW,CAACD,QAAQ;IAEzC,IAAI,CAACD,WAAWG,MAAM,CAACC,MAAM,EAAE;QAC7B,MAAM,IAAIZ,SACR,CAAC,6CAA6C,EAAEQ,WAAWG,MAAM,CAACE,IAAI,EAAE,EACxEf,WAAWgB,WAAW;IAE1B;IAEA,MAAMC,eAAe,MAAMd,gBAAgB;QACzCO;QACAC;QACAF;IACF;IAEA,IAAIQ,wBAAwBC,UAAU;QACpC,OAAOD;IACT;IAEA,IAAIP,WAAWG,MAAM,CAACC,MAAM,CAACK,QAAQ,EAAEC,QAAQ;QAC7C,IAAIC,iBAAiB;QACrB,KAAK,MAAMC,WAAWZ,WAAWG,MAAM,CAACC,MAAM,CAACK,QAAQ,CAAE;YACvDE,iBAAiB,MAAMC,QAAQb,KAAK;gBAClCc,KAAKN;gBACLO,QAAQ;oBACNd,YAAYA,WAAWG,MAAM,CAACE,IAAI;oBAClCJ;gBACF;YACF;QACF;QAEA,IAAIU,0BAA0BH,UAAU;YACtC,OAAOG;QACT;IACF;IAEA,MAAMI,UAAUf,WAAWG,MAAM,CAACC,MAAM,EAAEY,aAAahB,WAAWG,MAAM,CAACE,IAAI;IAC7E,MAAMY,WAAW1B,KAAK2B,OAAO,CAAC,GAAGH,QAAQ,CAAC,EAAEd,UAAU;IACtD,IAAIkB;IAEJ,IAAI;QACFA,QAAQ,MAAM/B,WAAWgC,IAAI,CAACH;IAChC,EAAE,OAAOI,KAAK;QACZ,IAAIA,IAAIC,IAAI,KAAK,UAAU;YACzBvB,IAAIwB,OAAO,CAACC,MAAM,CAACC,KAAK,CACtB,CAAC,KAAK,EAAExB,SAAS,gBAAgB,EAAED,WAAWG,MAAM,CAACE,IAAI,CAAC,wCAAwC,EAAEY,UAAU;YAGhH,wEAAwE;YACxE,kIAAkI;YAClI,OAAOT,SAASkB,IAAI,CAClB;gBACEC,QAAQ;oBACN;wBACEC,SAAS;oBACX;iBACD;YACH,GACA;gBACEC,SAAShC,gBAAgB;oBACvBgC,SAAS,IAAIC;oBACb/B;gBACF;gBACAV,QAAQ;YACV;QAEJ;QAEA,MAAMgC;IACR;IAEA,MAAMU,OAAOrC,WAAWuB;IACxB,MAAMe,iBAAiB,AAAC,MAAM7C,iBAAiB8B,aAActB,oBAAoBsB;IAEjF,IAAIY,UAAU,IAAIC;IAClBD,QAAQI,GAAG,CAAC,gBAAgBD,eAAeE,IAAI;IAC/CL,QAAQI,GAAG,CAAC,kBAAkBd,MAAMgB,IAAI,GAAG;IAC3CN,UAAU7B,WAAWG,MAAM,CAACC,MAAM,EAAEgC,wBAChCpC,WAAWG,MAAM,CAACC,MAAM,CAACgC,qBAAqB,CAAC;QAAEP;IAAQ,KACzDA;IAEJ,OAAO,IAAIrB,SAASuB,MAAM;QACxBF,SAAShC,gBAAgB;YACvBgC;YACA9B;QACF;QACAV,QAAQC,WAAW+C,EAAE;IACvB;AACF,EAAC"}
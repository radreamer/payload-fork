{"version":3,"sources":["../../src/versions/enforceMaxVersions.ts"],"sourcesContent":["// @ts-strict-ignore\nimport type { SanitizedCollectionConfig } from '../collections/config/types.js'\nimport type { SanitizedGlobalConfig } from '../globals/config/types.js'\nimport type { Payload, PayloadRequest, Where } from '../types/index.js'\n\ntype Args = {\n  collection?: SanitizedCollectionConfig\n  global?: SanitizedGlobalConfig\n  id?: number | string\n  max: number\n  payload: Payload\n  req?: PayloadRequest\n}\n\nexport const enforceMaxVersions = async ({\n  id,\n  collection,\n  global,\n  max,\n  payload,\n  req,\n}: Args): Promise<void> => {\n  const entityType = collection ? 'collection' : 'global'\n  const slug = collection ? collection.slug : global?.slug\n\n  try {\n    const where: Where = {}\n    let oldestAllowedDoc\n\n    if (collection) {\n      where.parent = {\n        equals: id,\n      }\n\n      const query = await payload.db.findVersions({\n        collection: collection.slug,\n        limit: 1,\n        pagination: false,\n        req,\n        skip: max,\n        sort: '-updatedAt',\n        where,\n      })\n\n      ;[oldestAllowedDoc] = query.docs\n    } else if (global) {\n      const query = await payload.db.findGlobalVersions({\n        global: global.slug,\n        limit: 1,\n        pagination: false,\n        req,\n        skip: max,\n        sort: '-updatedAt',\n        where,\n      })\n\n      ;[oldestAllowedDoc] = query.docs\n    }\n\n    if (oldestAllowedDoc?.updatedAt) {\n      const deleteQuery: Where = {\n        updatedAt: {\n          less_than_equal: oldestAllowedDoc.updatedAt,\n        },\n      }\n\n      if (collection) {\n        deleteQuery.parent = {\n          equals: id,\n        }\n      }\n\n      await payload.db.deleteVersions({\n        collection: slug,\n        req,\n        where: deleteQuery,\n      })\n    }\n  } catch (err) {\n    payload.logger.error(\n      `There was an error cleaning up old versions for the ${entityType} ${slug}`,\n    )\n  }\n}\n"],"names":["enforceMaxVersions","id","collection","global","max","payload","req","entityType","slug","where","oldestAllowedDoc","parent","equals","query","db","findVersions","limit","pagination","skip","sort","docs","findGlobalVersions","updatedAt","deleteQuery","less_than_equal","deleteVersions","err","logger","error"],"mappings":"AAAA,oBAAoB;AAcpB,OAAO,MAAMA,qBAAqB,OAAO,EACvCC,EAAE,EACFC,UAAU,EACVC,MAAM,EACNC,GAAG,EACHC,OAAO,EACPC,GAAG,EACE;IACL,MAAMC,aAAaL,aAAa,eAAe;IAC/C,MAAMM,OAAON,aAAaA,WAAWM,IAAI,GAAGL,QAAQK;IAEpD,IAAI;QACF,MAAMC,QAAe,CAAC;QACtB,IAAIC;QAEJ,IAAIR,YAAY;YACdO,MAAME,MAAM,GAAG;gBACbC,QAAQX;YACV;YAEA,MAAMY,QAAQ,MAAMR,QAAQS,EAAE,CAACC,YAAY,CAAC;gBAC1Cb,YAAYA,WAAWM,IAAI;gBAC3BQ,OAAO;gBACPC,YAAY;gBACZX;gBACAY,MAAMd;gBACNe,MAAM;gBACNV;YACF;YAEC,CAACC,iBAAiB,GAAGG,MAAMO,IAAI;QAClC,OAAO,IAAIjB,QAAQ;YACjB,MAAMU,QAAQ,MAAMR,QAAQS,EAAE,CAACO,kBAAkB,CAAC;gBAChDlB,QAAQA,OAAOK,IAAI;gBACnBQ,OAAO;gBACPC,YAAY;gBACZX;gBACAY,MAAMd;gBACNe,MAAM;gBACNV;YACF;YAEC,CAACC,iBAAiB,GAAGG,MAAMO,IAAI;QAClC;QAEA,IAAIV,kBAAkBY,WAAW;YAC/B,MAAMC,cAAqB;gBACzBD,WAAW;oBACTE,iBAAiBd,iBAAiBY,SAAS;gBAC7C;YACF;YAEA,IAAIpB,YAAY;gBACdqB,YAAYZ,MAAM,GAAG;oBACnBC,QAAQX;gBACV;YACF;YAEA,MAAMI,QAAQS,EAAE,CAACW,cAAc,CAAC;gBAC9BvB,YAAYM;gBACZF;gBACAG,OAAOc;YACT;QACF;IACF,EAAE,OAAOG,KAAK;QACZrB,QAAQsB,MAAM,CAACC,KAAK,CAClB,CAAC,oDAAoD,EAAErB,WAAW,CAAC,EAAEC,MAAM;IAE/E;AACF,EAAC"}
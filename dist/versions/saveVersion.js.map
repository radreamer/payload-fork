{"version":3,"sources":["../../src/versions/saveVersion.ts"],"sourcesContent":["// @ts-strict-ignore\nimport type { SanitizedCollectionConfig, TypeWithID } from '../collections/config/types.js'\nimport type { SanitizedGlobalConfig } from '../globals/config/types.js'\nimport type { CreateGlobalVersionArgs, CreateVersionArgs, Payload } from '../index.js'\nimport type { PayloadRequest, SelectType } from '../types/index.js'\n\nimport { deepCopyObjectSimple } from '../index.js'\nimport sanitizeInternalFields from '../utilities/sanitizeInternalFields.js'\nimport { getQueryDraftsSelect } from './drafts/getQueryDraftsSelect.js'\nimport { enforceMaxVersions } from './enforceMaxVersions.js'\n\ntype Args = {\n  autosave?: boolean\n  collection?: SanitizedCollectionConfig\n  docWithLocales: any\n  draft?: boolean\n  global?: SanitizedGlobalConfig\n  id?: number | string\n  payload: Payload\n  publishSpecificLocale?: string\n  req?: PayloadRequest\n  select?: SelectType\n  snapshot?: any\n}\n\nexport const saveVersion = async ({\n  id,\n  autosave,\n  collection,\n  docWithLocales: doc,\n  draft,\n  global,\n  payload,\n  publishSpecificLocale,\n  req,\n  select,\n  snapshot,\n}: Args): Promise<TypeWithID> => {\n  let result\n  let createNewVersion = true\n  const now = new Date().toISOString()\n  const versionData = deepCopyObjectSimple(doc)\n  if (draft) {\n    versionData._status = 'draft'\n  }\n\n  if (collection?.timestamps && draft) {\n    versionData.updatedAt = now\n  }\n\n  if (versionData._id) {\n    delete versionData._id\n  }\n\n  try {\n    if (autosave) {\n      let docs\n      const findVersionArgs = {\n        limit: 1,\n        pagination: false,\n        req,\n        sort: '-updatedAt',\n      }\n\n      if (collection) {\n        ;({ docs } = await payload.db.findVersions({\n          ...findVersionArgs,\n          collection: collection.slug,\n          limit: 1,\n          pagination: false,\n          req,\n          where: {\n            parent: {\n              equals: id,\n            },\n          },\n        }))\n      } else {\n        ;({ docs } = await payload.db.findGlobalVersions({\n          ...findVersionArgs,\n          global: global.slug,\n          limit: 1,\n          pagination: false,\n          req,\n        }))\n      }\n      const [latestVersion] = docs\n\n      // overwrite the latest version if it's set to autosave\n      if (latestVersion?.autosave === true) {\n        createNewVersion = false\n\n        const data: Record<string, unknown> = {\n          createdAt: new Date(latestVersion.createdAt).toISOString(),\n          latest: true,\n          parent: id,\n          updatedAt: now,\n          version: {\n            ...versionData,\n          },\n        }\n\n        const updateVersionArgs = {\n          id: latestVersion.id,\n          req,\n          versionData: data as TypeWithID,\n        }\n\n        if (collection) {\n          result = await payload.db.updateVersion({\n            ...updateVersionArgs,\n            collection: collection.slug,\n            req,\n          })\n        } else {\n          result = await payload.db.updateGlobalVersion({\n            ...updateVersionArgs,\n            global: global.slug,\n            req,\n          })\n        }\n      }\n    }\n\n    if (createNewVersion) {\n      const createVersionArgs = {\n        autosave: Boolean(autosave),\n        collectionSlug: undefined,\n        createdAt: now,\n        globalSlug: undefined,\n        parent: collection ? id : undefined,\n        publishedLocale: publishSpecificLocale || undefined,\n        req,\n        select: getQueryDraftsSelect({ select }),\n        updatedAt: now,\n        versionData,\n      }\n\n      if (collection) {\n        createVersionArgs.collectionSlug = collection.slug\n        result = await payload.db.createVersion(createVersionArgs)\n      }\n\n      if (global) {\n        createVersionArgs.globalSlug = global.slug\n        result = await payload.db.createGlobalVersion(createVersionArgs)\n      }\n\n      if (publishSpecificLocale && snapshot) {\n        const snapshotData = deepCopyObjectSimple(snapshot)\n        if (snapshotData._id) {\n          delete snapshotData._id\n        }\n\n        snapshotData._status = 'draft'\n\n        const snapshotDate = new Date().toISOString()\n\n        const updatedArgs = {\n          ...createVersionArgs,\n          createdAt: snapshotDate,\n          returning: false,\n          snapshot: true,\n          updatedAt: snapshotDate,\n          versionData: snapshotData,\n        } as CreateGlobalVersionArgs & CreateVersionArgs\n\n        if (collection) {\n          await payload.db.createVersion(updatedArgs)\n        }\n        if (global) {\n          await payload.db.createGlobalVersion(updatedArgs)\n        }\n      }\n    }\n  } catch (err) {\n    let errorMessage: string | undefined\n\n    if (collection) {\n      errorMessage = `There was an error while saving a version for the ${typeof collection.labels.singular === 'string' ? collection.labels.singular : collection.slug} with ID ${id}.`\n    }\n    if (global) {\n      errorMessage = `There was an error while saving a version for the global ${typeof global.label === 'string' ? global.label : global.slug}.`\n    }\n    payload.logger.error({ err, msg: errorMessage })\n    return\n  }\n\n  const max = collection ? collection.versions.maxPerDoc : global.versions.max\n\n  if (createNewVersion && max > 0) {\n    await enforceMaxVersions({\n      id,\n      collection,\n      global,\n      max,\n      payload,\n      req,\n    })\n  }\n\n  let createdVersion = result.version\n\n  createdVersion = sanitizeInternalFields(createdVersion)\n  createdVersion.id = result.parent\n\n  return createdVersion\n}\n"],"names":["deepCopyObjectSimple","sanitizeInternalFields","getQueryDraftsSelect","enforceMaxVersions","saveVersion","id","autosave","collection","docWithLocales","doc","draft","global","payload","publishSpecificLocale","req","select","snapshot","result","createNewVersion","now","Date","toISOString","versionData","_status","timestamps","updatedAt","_id","docs","findVersionArgs","limit","pagination","sort","db","findVersions","slug","where","parent","equals","findGlobalVersions","latestVersion","data","createdAt","latest","version","updateVersionArgs","updateVersion","updateGlobalVersion","createVersionArgs","Boolean","collectionSlug","undefined","globalSlug","publishedLocale","createVersion","createGlobalVersion","snapshotData","snapshotDate","updatedArgs","returning","err","errorMessage","labels","singular","label","logger","error","msg","max","versions","maxPerDoc","createdVersion"],"mappings":"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"}
{"version":3,"sources":["../../../src/auth/operations/resetPassword.ts"],"sourcesContent":["import { status as httpStatus } from 'http-status'\n\nimport type { Collection } from '../../collections/config/types.js'\nimport type { PayloadRequest } from '../../types/index.js'\n\nimport { APIError, Forbidden } from '../../errors/index.js'\nimport { commitTransaction } from '../../utilities/commitTransaction.js'\nimport { initTransaction } from '../../utilities/initTransaction.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport { getFieldsToSign } from '../getFieldsToSign.js'\nimport { jwtSign } from '../jwt.js'\nimport { authenticateLocalStrategy } from '../strategies/local/authenticate.js'\nimport { generatePasswordSaltHash } from '../strategies/local/generatePasswordSaltHash.js'\n\nexport type Result = {\n  token?: string\n  user: Record<string, unknown>\n}\n\nexport type Arguments = {\n  collection: Collection\n  data: {\n    password: string\n    token: string\n  }\n  depth?: number\n  overrideAccess?: boolean\n  req: PayloadRequest\n}\n\nexport const resetPasswordOperation = async (args: Arguments): Promise<Result> => {\n  const {\n    collection: { config: collectionConfig },\n    data,\n    depth,\n    overrideAccess,\n    req: {\n      payload: { secret },\n      payload,\n    },\n    req,\n  } = args\n\n  if (\n    !Object.prototype.hasOwnProperty.call(data, 'token') ||\n    !Object.prototype.hasOwnProperty.call(data, 'password')\n  ) {\n    throw new APIError('Missing required data.', httpStatus.BAD_REQUEST)\n  }\n\n  if (collectionConfig.auth.disableLocalStrategy) {\n    throw new Forbidden(req.t)\n  }\n\n  try {\n    const shouldCommit = await initTransaction(req)\n\n    // /////////////////////////////////////\n    // Reset Password\n    // /////////////////////////////////////\n\n    const user = await payload.db.findOne<any>({\n      collection: collectionConfig.slug,\n      req,\n      where: {\n        resetPasswordExpiration: { greater_than: new Date().toISOString() },\n        resetPasswordToken: { equals: data.token },\n      },\n    })\n\n    if (!user) {\n      throw new APIError('Token is either invalid or has expired.', httpStatus.FORBIDDEN)\n    }\n\n    // TODO: replace this method\n    const { hash, salt } = await generatePasswordSaltHash({\n      collection: collectionConfig,\n      password: data.password,\n      req,\n    })\n\n    user.salt = salt\n    user.hash = hash\n\n    user.resetPasswordExpiration = new Date().toISOString()\n\n    if (collectionConfig.auth.verify) {\n      user._verified = Boolean(user._verified)\n    }\n    // /////////////////////////////////////\n    // beforeValidate - Collection\n    // /////////////////////////////////////\n\n    if (collectionConfig.hooks?.beforeValidate?.length) {\n      for (const hook of collectionConfig.hooks.beforeValidate) {\n        await hook({\n          collection: args.collection?.config,\n          context: req.context,\n          data: user,\n          operation: 'update',\n          req,\n        })\n      }\n    }\n\n    // /////////////////////////////////////\n    // Update new password\n    // /////////////////////////////////////\n\n    const doc = await payload.db.updateOne({\n      id: user.id,\n      collection: collectionConfig.slug,\n      data: user,\n      req,\n    })\n\n    await authenticateLocalStrategy({ doc, password: data.password })\n\n    const fieldsToSign = getFieldsToSign({\n      collectionConfig,\n      email: user.email,\n      user,\n    })\n\n    const { token } = await jwtSign({\n      fieldsToSign,\n      secret,\n      tokenExpiration: collectionConfig.auth.tokenExpiration,\n    })\n\n    const fullUser = await payload.findByID({\n      id: user.id,\n      collection: collectionConfig.slug,\n      depth,\n      overrideAccess,\n      req,\n    })\n    if (shouldCommit) {\n      await commitTransaction(req)\n    }\n\n    if (fullUser) {\n      fullUser.collection = collectionConfig.slug\n      fullUser._strategy = 'local-jwt'\n    }\n\n    const result = {\n      token,\n      user: fullUser,\n    }\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(req)\n    throw error\n  }\n}\n"],"names":["status","httpStatus","APIError","Forbidden","commitTransaction","initTransaction","killTransaction","getFieldsToSign","jwtSign","authenticateLocalStrategy","generatePasswordSaltHash","resetPasswordOperation","args","collection","config","collectionConfig","data","depth","overrideAccess","req","payload","secret","Object","prototype","hasOwnProperty","call","BAD_REQUEST","auth","disableLocalStrategy","t","shouldCommit","user","db","findOne","slug","where","resetPasswordExpiration","greater_than","Date","toISOString","resetPasswordToken","equals","token","FORBIDDEN","hash","salt","password","verify","_verified","Boolean","hooks","beforeValidate","length","hook","context","operation","doc","updateOne","id","fieldsToSign","email","tokenExpiration","fullUser","findByID","_strategy","result","error"],"mappings":"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"}